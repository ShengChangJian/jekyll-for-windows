var search_data = {"index":{"searchIndex":["jekyll","cleaner","collection","collectionreader","command","commands","build","clean","doctor","help","new","newtheme","serve","servlet","configuration","converter","converters","identity","markdown","kramdownparser","rdiscountparser","redcarpetparser","commonmethods","withpygments","withrouge","withouthighlighting","smartypants","convertible","datareader","deprecator","document","drops","collectiondrop","documentdrop","drop","excerptdrop","jekylldrop","sitedrop","unifiedpayloaddrop","urldrop","entryfilter","errors","excerpt","external","filters","frontmatterdefaults","hooks","layout","layoutreader","liquidextensions","liquidrenderer","file","table","logadapter","page","pagereader","plugin","pluginmanager","postreader","publisher","reader","regenerator","relatedposts","renderer","site","staticfile","staticfilereader","stevenson","tags","highlightblock","includerelativetag","includetag","includetagerror","link","postcomparer","posturl","theme","themebuilder","erbrenderer","url","utils","ansi","platforms","rbconfig","kramdown","parser","smartypants","liquid","object","safeyaml","<=>()","<=>()","<=>()","<=>()","==()","[]()","[]()","[]()","[]()","[]=()","abort_with()","add()","add()","add_build_options()","add_code_tag()","add_code_tags()","add_default_collections()","add_dependency()","add_include_to_dependency()","add_permalink_suffix()","adjust_verbosity()","all()","applies?()","applies_path?()","applies_type?()","arg_is_present?()","array_to_sentence_string()","as_liquid()","asset_file?()","asset_file?()","backup?()","backwards_compatibilize()","base_directory()","basename()","basename_without_ext()","blessed_gems()","block_code()","block_code()","block_code()","boot_or_detach()","build()","build()","build_index()","can_be_published?()","case_insensitive_urls()","catch_inheritance()","categories()","categories()","categories_from_path()","cgi_escape()","check_auto()","check_coderay()","check_config_is_hash!()","check_include_exclude()","check_maruku()","check_pygments()","check_server()","class_with_proper_highlighter()","cleaned_relative_path()","cleanup()","cleanup!()","clear()","clear_cache()","close()","code_wrap()","coffeescript_file?()","coffeescript_file?()","collapse_document()","collect_urls()","collection()","collection()","collection_dir()","collection_names()","collections()","collections()","config=()","config_files()","configuration()","configuration_from_options()","configure_file_read_opts()","configure_include_paths()","configure_plugins()","configure_sass()","configure_theme()","conflicting_urls()","conscientious_require()","content_methods()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","converter_output_ext()","converters()","converters()","copy_file()","create!()","create_accessories()","create_blank_site()","create_directories()","create_error_page()","create_gemspec()","create_sample_files()","create_site()","create_starter_files()","csv_to_array()","custom_class_allowed?()","custom_processor()","data()","data()","data_for_table()","date()","date_to_long_string()","date_to_rfc822()","date_to_string()","date_to_xmlschema()","day()","debug()","deep_merge_hashes()","deep_merge_hashes!()","defaults()","defaults_deprecate_type()","deprecated_equality()","deprecated_relative_permalinks()","deprecation_checks()","deprecation_message()","derive_base_directory()","descendants()","destination()","destination()","destination()","destination_rel_dir()","dir()","directory()","disabled?()","display()","do_get()","do_layout()","docs()","docs_to_write()","documents()","draft?()","duplicable?()","duplicate_frozen_values()","each()","each_key()","each_site_file()","enable_logging()","enable_ssl()","ensure_not_in_dest()","ensure_time!()","entries()","entries_in()","entry_filter()","env()","environment()","erb()","error()","error()","escape_path()","excerpt()","excerpt()","excerpt_separator()","excluded?()","existing_file_modified?()","existing_files()","exists?()","extname_list()","extract_excerpt()","extract_metadata()","fallback_data()","fetch()","file()","file_handler_opts()","file_read_opts()","files()","filter()","filter_entries()","filtered_entries()","find()","find_converter_instance()","fix_common_issues()","force()","format_bytes()","format_error()","formatted_topic()","from()","frontmatter_defaults()","fsnotify_buggy?()","gemfile_contents()","gemspec()","generate()","generate_excerpt()","generate_excerpt?()","generate_row()","generate_table()","generate_table_head_border()","generate_url()","generate_url_from_drop()","generate_url_from_hash()","generated_permalink()","generated_url()","get_config_value_with_override()","get_entries()","get_processor()","glob_include?()","global()","group_by()","groupable?()","has?()","has_precedence?()","has_yaml_header?()","hash_for_json()","hash_for_json()","healthy?()","hidden_in_the_future?()","highlighter()","highlighter_prefix()","highlighter_prefix()","highlighter_suffix()","highlighter_suffix()","hook_owner()","hour()","html?()","html_pages()","i_day()","i_month()","id()","id()","in_dest_dir()","in_source_dir()","in_theme_dir()","include?()","included?()","includes_path()","increment_bytes()","increment_time()","incremental?()","index?()","info()","inherited()","inherited()","init_with_program()","init_with_program()","init_with_program()","init_with_program()","init_with_program()","init_with_program()","init_with_program()","initialize_git_repo()","initialized_post_name()","insert_hook()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","instantiate_subclasses()","invalid_command()","invalid_layout?()","invalid_layout?()","item_property()","jekyll()","jekyll_version_with_minor()","jsonify()","keep_dirs()","keep_file_regex()","key?()","keys()","launch_browser()","layout()","layout_directory()","layout_directory_in_cwd()","layout_directory_inside_source()","layout_entries()","layout_name()","layouts_path()","limit_posts!()","load_cached_partial()","locate_include_file()","log_level=()","logdevice()","logger()","logger=()","lookup_variable()","lsi_related_posts()","make_accessible()","markdownify()","matches()","matches()","matches()","matching_sets()","measure_bytes()","measure_time()","mergable?()","merge()","merge!()","merge_data!()","merge_default_proc()","merge_values()","merged_file_read_opts()","message()","metadata_file()","metadata_file()","method_missing()","method_missing()","mime_types()","minute()","mkdir_p()","modernize_coderay_config()","modified?()","modified?()","modified_time()","month()","most_recent_posts()","mtime()","mtimes()","mutable()","mutable?()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_dirs()","new_files()","next()","next_doc()","no_subcommand()","normalize_whitespace()","number_of_words()","obsolete_files()","output()","output_ext()","output_ext()","output_ext()","output_ext()","output_ext()","output_ext()","output_exts()","outside_site_source?()","page_path()","parent_dirs()","parse()","parse_condition()","parse_date()","parse_options()","parse_params()","path()","path()","path()","path_for()","permalink()","permalink()","permalink_ext()","place_in_layout?()","place_in_layout?()","place_in_layout?()","place_in_layouts()","placeholders()","plugin_allowed?()","plugins_path()","pluralized_array_from_hash()","pop()","populate_categories()","populate_tags()","post_attr_hash()","post_date()","post_read()","post_slug()","posts()","posts()","preserve_source_location?()","previous()","previous_doc()","print_stats()","priority()","priority_value()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process_site()","publish?()","published?()","published?()","publisher()","push()","quiet()","quiet?()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read_config_file()","read_config_files()","read_content()","read_data_file()","read_data_to()","read_directories()","read_document()","read_drafts()","read_file()","read_metadata()","read_posts()","read_publishable()","read_static_file()","read_yaml()","realpath_for()","realpath_prefixed_with?()","regenerate?()","regenerate_document?()","regenerate_page?()","register()","register_one()","related_posts()","relative_directory()","relative_path()","relative_path()","relative_permalinks_are_deprecated()","relative_to_source()","remove()","renamed_key()","render()","render()","render()","render()","render()","render()","render()","render()","render!()","render_all_layouts()","render_codehighlighter()","render_docs()","render_liquid()","render_liquid()","render_pages()","render_pygments()","render_rouge()","render_variable()","render_with_liquid?()","render_with_liquid?()","replace_generated_toc()","replaced_files()","require_all()","require_from_bundler()","require_gems()","require_if_present()","require_plugin_files()","require_with_graceful_fail()","reset()","reset()","reset()","reset_cache()","respond_to?()","respond_to_missing?()","retrieve_dirs()","retrieve_pages()","retrieve_posts()","retrieve_static_files()","root()","root()","rouge_formatter()","run()","safe()","safe_glob()","safe_load_file()","sample()","sanitize_filename()","sanitize_label()","sanitize_path()","sanitize_url()","sanitized_opts()","sanitized_path()","sass_file?()","sass_file?()","sass_path()","sassify()","scaffold_path()","scaffold_post_content()","scssify()","search_file()","second()","server_address()","set_defaults()","set_timezone()","setup()","setup()","setup()","setup()","shift()","short_month()","short_year()","site()","site_cleaner()","site_data()","site_payload()","site_template()","sites()","slug()","slugify()","slugify()","smartify()","sort()","sort_files!()","sort_input()","source()","source_file_mtime()","source_modified_or_dest_missing?()","special?()","start_callback()","stats_table()","stringify_hash_keys()","stringify_keys()","strip()","strip_coderay_prefix()","strip_heredoc()","style_to_permalink()","subclasses()","symbolize_hash_keys()","symlink?()","symlink_outside_site_source?()","syntax_example()","table_widths()","tag_includes_dirs()","tag_includes_dirs()","tag_name()","tags()","template()","template()","template_file()","theme_directories()","theme_layout_directory()","theme_layout_entries()","third_party_processors()","time()","title()","titleize_slug()","to_h()","to_h()","to_hash()","to_integer()","to_json()","to_json()","to_liquid()","to_liquid()","to_liquid()","to_liquid()","to_liquid()","to_liquid()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","transform()","transform_keys()","trigger()","trigger_hooks()","trigger_hooks()","trigger_hooks()","type()","type()","unescape_path()","unshift()","update_deprecated_types()","uri_escape()","url()","url()","url()","url_placeholders()","url_placeholders()","url_template()","url_template()","urls_only_differ_by_case()","user_email()","user_name()","valid?()","valid_include_file?()","valid_processors()","valid_sets()","validate_and_ensure_charset()","validate_data!()","validate_file_name()","validate_params()","validate_permalink!()","value_from_plural_key()","value_from_singular_key()","verbose()","verbose?()","version()","warn()","warn()","warnings()","watch()","webrick_opts()","where()","where_exp()","whitelist()","within()","write()","write()","write()","write()","write?()","write?()","write?()","write?()","write_file()","write_metadata()","xml_escape()","y_day()","yaml_file?()","year()","license","readme.markdown","mime.types","about","main.scss","feed.xml","index.html","gemfile","default.html","page.html","post.html","_post","index.html","style.scss"],"longSearchIndex":["jekyll","jekyll::cleaner","jekyll::collection","jekyll::collectionreader","jekyll::command","jekyll::commands","jekyll::commands::build","jekyll::commands::clean","jekyll::commands::doctor","jekyll::commands::help","jekyll::commands::new","jekyll::commands::newtheme","jekyll::commands::serve","jekyll::commands::serve::servlet","jekyll::configuration","jekyll::converter","jekyll::converters","jekyll::converters::identity","jekyll::converters::markdown","jekyll::converters::markdown::kramdownparser","jekyll::converters::markdown::rdiscountparser","jekyll::converters::markdown::redcarpetparser","jekyll::converters::markdown::redcarpetparser::commonmethods","jekyll::converters::markdown::redcarpetparser::withpygments","jekyll::converters::markdown::redcarpetparser::withrouge","jekyll::converters::markdown::redcarpetparser::withouthighlighting","jekyll::converters::smartypants","jekyll::convertible","jekyll::datareader","jekyll::deprecator","jekyll::document","jekyll::drops","jekyll::drops::collectiondrop","jekyll::drops::documentdrop","jekyll::drops::drop","jekyll::drops::excerptdrop","jekyll::drops::jekylldrop","jekyll::drops::sitedrop","jekyll::drops::unifiedpayloaddrop","jekyll::drops::urldrop","jekyll::entryfilter","jekyll::errors","jekyll::excerpt","jekyll::external","jekyll::filters","jekyll::frontmatterdefaults","jekyll::hooks","jekyll::layout","jekyll::layoutreader","jekyll::liquidextensions","jekyll::liquidrenderer","jekyll::liquidrenderer::file","jekyll::liquidrenderer::table","jekyll::logadapter","jekyll::page","jekyll::pagereader","jekyll::plugin","jekyll::pluginmanager","jekyll::postreader","jekyll::publisher","jekyll::reader","jekyll::regenerator","jekyll::relatedposts","jekyll::renderer","jekyll::site","jekyll::staticfile","jekyll::staticfilereader","jekyll::stevenson","jekyll::tags","jekyll::tags::highlightblock","jekyll::tags::includerelativetag","jekyll::tags::includetag","jekyll::tags::includetagerror","jekyll::tags::link","jekyll::tags::postcomparer","jekyll::tags::posturl","jekyll::theme","jekyll::themebuilder","jekyll::themebuilder::erbrenderer","jekyll::url","jekyll::utils","jekyll::utils::ansi","jekyll::utils::platforms","jekyll::utils::platforms::rbconfig","kramdown","kramdown::parser","kramdown::parser::smartypants","liquid","object","safeyaml","jekyll::document#<=>()","jekyll::drops::documentdrop#<=>()","jekyll::plugin::<=>()","jekyll::plugin#<=>()","jekyll::tags::postcomparer#==()","jekyll::convertible#[]()","jekyll::document#[]()","jekyll::drops::drop#[]()","jekyll::drops::sitedrop#[]()","jekyll::drops::drop#[]=()","jekyll::logadapter#abort_with()","jekyll::regenerator#add()","jekyll::stevenson#add()","jekyll::command::add_build_options()","jekyll::tags::highlightblock#add_code_tag()","jekyll::converters::markdown::redcarpetparser::commonmethods#add_code_tags()","jekyll::configuration#add_default_collections()","jekyll::regenerator#add_dependency()","jekyll::tags::includetag#add_include_to_dependency()","jekyll::utils#add_permalink_suffix()","jekyll::logadapter#adjust_verbosity()","jekyll::frontmatterdefaults#all()","jekyll::frontmatterdefaults#applies?()","jekyll::frontmatterdefaults#applies_path?()","jekyll::frontmatterdefaults#applies_type?()","jekyll::deprecator#arg_is_present?()","jekyll::filters#array_to_sentence_string()","jekyll::filters#as_liquid()","jekyll::convertible#asset_file?()","jekyll::document#asset_file?()","jekyll::entryfilter#backup?()","jekyll::configuration#backwards_compatibilize()","jekyll::entryfilter#base_directory()","jekyll::document#basename()","jekyll::document#basename_without_ext()","jekyll::external::blessed_gems()","jekyll::converters::markdown::redcarpetparser::withpygments#block_code()","jekyll::converters::markdown::redcarpetparser::withrouge#block_code()","jekyll::converters::markdown::redcarpetparser::withouthighlighting#block_code()","jekyll::commands::serve::boot_or_detach()","jekyll::commands::build::build()","jekyll::relatedposts#build()","jekyll::relatedposts#build_index()","jekyll::publisher#can_be_published?()","jekyll::commands::doctor::case_insensitive_urls()","jekyll::plugin::catch_inheritance()","jekyll::drops::urldrop#categories()","jekyll::site#categories()","jekyll::document#categories_from_path()","jekyll::filters#cgi_escape()","jekyll::configuration#check_auto()","jekyll::configuration#check_coderay()","jekyll::configuration#check_config_is_hash!()","jekyll::configuration#check_include_exclude()","jekyll::configuration#check_maruku()","jekyll::configuration#check_pygments()","jekyll::configuration#check_server()","jekyll::converters::markdown::redcarpetparser#class_with_proper_highlighter()","jekyll::document#cleaned_relative_path()","jekyll::site#cleanup()","jekyll::cleaner#cleanup!()","jekyll::regenerator#clear()","jekyll::regenerator#clear_cache()","jekyll::stevenson#close()","jekyll::converters::markdown::redcarpetparser::withouthighlighting#code_wrap()","jekyll::convertible#coffeescript_file?()","jekyll::document#coffeescript_file?()","jekyll::drops::documentdrop#collapse_document()","jekyll::commands::doctor::collect_urls()","jekyll::drops::documentdrop#collection()","jekyll::drops::urldrop#collection()","jekyll::collection#collection_dir()","jekyll::site#collection_names()","jekyll::drops::sitedrop#collections()","jekyll::site#collections()","jekyll::site#config=()","jekyll::configuration#config_files()","jekyll::configuration()","jekyll::command::configuration_from_options()","jekyll::site#configure_file_read_opts()","jekyll::site#configure_include_paths()","jekyll::site#configure_plugins()","jekyll::theme#configure_sass()","jekyll::site#configure_theme()","jekyll::commands::doctor::conflicting_urls()","jekyll::pluginmanager#conscientious_require()","jekyll::drops::drop#content_methods()","jekyll::converters::identity#convert()","jekyll::converters::markdown#convert()","jekyll::converters::markdown::kramdownparser#convert()","jekyll::converters::markdown::rdiscountparser#convert()","jekyll::converters::markdown::redcarpetparser#convert()","jekyll::converters::smartypants#convert()","jekyll::renderer#convert()","jekyll::renderer#converter_output_ext()","jekyll::convertible#converters()","jekyll::renderer#converters()","jekyll::staticfile#copy_file()","jekyll::themebuilder#create!()","jekyll::themebuilder#create_accessories()","jekyll::commands::new::create_blank_site()","jekyll::themebuilder#create_directories()","jekyll::commands::serve::create_error_page()","jekyll::themebuilder#create_gemspec()","jekyll::commands::new::create_sample_files()","jekyll::commands::new::create_site()","jekyll::themebuilder#create_starter_files()","jekyll::configuration#csv_to_array()","jekyll::converters::markdown#custom_class_allowed?()","jekyll::converters::markdown#custom_processor()","jekyll::document#data()","jekyll::excerpt#data()","jekyll::liquidrenderer::table#data_for_table()","jekyll::document#date()","jekyll::filters#date_to_long_string()","jekyll::filters#date_to_rfc822()","jekyll::filters#date_to_string()","jekyll::filters#date_to_xmlschema()","jekyll::drops::urldrop#day()","jekyll::logadapter#debug()","jekyll::utils#deep_merge_hashes()","jekyll::utils#deep_merge_hashes!()","jekyll::staticfile#defaults()","jekyll::deprecator#defaults_deprecate_type()","jekyll::tags::postcomparer#deprecated_equality()","jekyll::commands::doctor::deprecated_relative_permalinks()","jekyll::pluginmanager#deprecation_checks()","jekyll::deprecator#deprecation_message()","jekyll::entryfilter#derive_base_directory()","jekyll::plugin::descendants()","jekyll::document#destination()","jekyll::page#destination()","jekyll::staticfile#destination()","jekyll::staticfile#destination_rel_dir()","jekyll::page#dir()","jekyll::collection#directory()","jekyll::regenerator#disabled?()","jekyll::relatedposts#display()","jekyll::commands::serve::servlet#do_get()","jekyll::convertible#do_layout()","jekyll::collection#docs()","jekyll::site#docs_to_write()","jekyll::site#documents()","jekyll::document#draft?()","jekyll::utils#duplicable?()","jekyll::utils#duplicate_frozen_values()","jekyll::drops::drop#each()","jekyll::drops::drop#each_key()","jekyll::site#each_site_file()","jekyll::commands::serve::enable_logging()","jekyll::commands::serve::enable_ssl()","jekyll::site#ensure_not_in_dest()","jekyll::frontmatterdefaults#ensure_time!()","jekyll::collection#entries()","jekyll::layoutreader#entries_in()","jekyll::collection#entry_filter()","jekyll::env()","jekyll::drops::jekylldrop#environment()","jekyll::themebuilder#erb()","jekyll::logadapter#error()","jekyll::stevenson#error()","jekyll::url::escape_path()","jekyll::drops::documentdrop#excerpt()","jekyll::drops::excerptdrop#excerpt()","jekyll::document#excerpt_separator()","jekyll::entryfilter#excluded?()","jekyll::regenerator#existing_file_modified?()","jekyll::cleaner#existing_files()","jekyll::collection#exists?()","jekyll::converters::markdown#extname_list()","jekyll::excerpt#extract_excerpt()","jekyll::collection#extract_metadata()","jekyll::drops::unifiedpayloaddrop#fallback_data()","jekyll::drops::drop#fetch()","jekyll::liquidrenderer#file()","jekyll::commands::serve::file_handler_opts()","jekyll::tags::includetag#file_read_opts()","jekyll::collection#files()","jekyll::entryfilter#filter()","jekyll::reader#filter_entries()","jekyll::collection#filtered_entries()","jekyll::frontmatterdefaults#find()","jekyll::site#find_converter_instance()","jekyll::configuration#fix_common_issues()","jekyll::regenerator#force()","jekyll::liquidrenderer::table#format_bytes()","jekyll::liquidrenderer::format_error()","jekyll::logadapter#formatted_topic()","jekyll::configuration::from()","jekyll::site#frontmatter_defaults()","jekyll::commands::doctor::fsnotify_buggy?()","jekyll::commands::new::gemfile_contents()","jekyll::theme#gemspec()","jekyll::site#generate()","jekyll::document#generate_excerpt()","jekyll::document#generate_excerpt?()","jekyll::liquidrenderer::table#generate_row()","jekyll::liquidrenderer::table#generate_table()","jekyll::liquidrenderer::table#generate_table_head_border()","jekyll::url#generate_url()","jekyll::url#generate_url_from_drop()","jekyll::url#generate_url_from_hash()","jekyll::url#generated_permalink()","jekyll::url#generated_url()","jekyll::configuration#get_config_value_with_override()","jekyll::reader#get_entries()","jekyll::converters::markdown#get_processor()","jekyll::entryfilter#glob_include?()","jekyll::drops::jekylldrop::global()","jekyll::filters#group_by()","jekyll::filters#groupable?()","jekyll::utils::ansi#has?()","jekyll::frontmatterdefaults#has_precedence?()","jekyll::utils#has_yaml_header?()","jekyll::drops::documentdrop#hash_for_json()","jekyll::drops::drop#hash_for_json()","jekyll::commands::doctor::healthy?()","jekyll::publisher#hidden_in_the_future?()","jekyll::converters::markdown::kramdownparser#highlighter()","jekyll::converter#highlighter_prefix()","jekyll::converter::highlighter_prefix()","jekyll::converter#highlighter_suffix()","jekyll::converter::highlighter_suffix()","jekyll::convertible#hook_owner()","jekyll::drops::urldrop#hour()","jekyll::page#html?()","jekyll::drops::sitedrop#html_pages()","jekyll::drops::urldrop#i_day()","jekyll::drops::urldrop#i_month()","jekyll::document#id()","jekyll::excerpt#id()","jekyll::site#in_dest_dir()","jekyll::site#in_source_dir()","jekyll::site#in_theme_dir()","jekyll::excerpt#include?()","jekyll::entryfilter#included?()","jekyll::theme#includes_path()","jekyll::liquidrenderer#increment_bytes()","jekyll::liquidrenderer#increment_time()","jekyll::site#incremental?()","jekyll::page#index?()","jekyll::logadapter#info()","jekyll::command::inherited()","jekyll::plugin::inherited()","jekyll::commands::build::init_with_program()","jekyll::commands::clean::init_with_program()","jekyll::commands::doctor::init_with_program()","jekyll::commands::help::init_with_program()","jekyll::commands::new::init_with_program()","jekyll::commands::newtheme::init_with_program()","jekyll::commands::serve::init_with_program()","jekyll::themebuilder#initialize_git_repo()","jekyll::commands::new::initialized_post_name()","jekyll::hooks::insert_hook()","jekyll::collection#inspect()","jekyll::document#inspect()","jekyll::drops::drop#inspect()","jekyll::excerpt#inspect()","jekyll::filters#inspect()","jekyll::page#inspect()","jekyll::site#instantiate_subclasses()","jekyll::commands::help::invalid_command()","jekyll::convertible#invalid_layout?()","jekyll::renderer#invalid_layout?()","jekyll::filters#item_property()","jekyll::drops::unifiedpayloaddrop#jekyll()","jekyll::themebuilder::erbrenderer#jekyll_version_with_minor()","jekyll::filters#jsonify()","jekyll::cleaner#keep_dirs()","jekyll::cleaner#keep_file_regex()","jekyll::drops::drop#key?()","jekyll::drops::drop#keys()","jekyll::commands::serve::launch_browser()","jekyll::drops::excerptdrop#layout()","jekyll::layoutreader#layout_directory()","jekyll::layoutreader#layout_directory_in_cwd()","jekyll::layoutreader#layout_directory_inside_source()","jekyll::layoutreader#layout_entries()","jekyll::layoutreader#layout_name()","jekyll::theme#layouts_path()","jekyll::site#limit_posts!()","jekyll::tags::includetag#load_cached_partial()","jekyll::tags::includetag#locate_include_file()","jekyll::logadapter#log_level=()","jekyll::stevenson#logdevice()","jekyll::logger()","jekyll::logger=()","jekyll::liquidextensions#lookup_variable()","jekyll::relatedposts#lsi_related_posts()","jekyll::converters::markdown::kramdownparser#make_accessible()","jekyll::filters#markdownify()","jekyll::converters::identity#matches()","jekyll::converters::markdown#matches()","jekyll::converters::smartypants#matches()","jekyll::frontmatterdefaults#matching_sets()","jekyll::liquidrenderer::file#measure_bytes()","jekyll::liquidrenderer#measure_time()","jekyll::utils#mergable?()","jekyll::drops::drop#merge()","jekyll::drops::drop#merge!()","jekyll::document#merge_data!()","jekyll::utils#merge_default_proc()","jekyll::utils#merge_values()","jekyll::utils#merged_file_read_opts()","jekyll::logadapter#message()","jekyll::cleaner#metadata_file()","jekyll::regenerator#metadata_file()","jekyll::collection#method_missing()","jekyll::document#method_missing()","jekyll::commands::serve::mime_types()","jekyll::drops::urldrop#minute()","jekyll::themebuilder#mkdir_p()","jekyll::converters::markdown::kramdownparser#modernize_coderay_config()","jekyll::regenerator#modified?()","jekyll::staticfile#modified?()","jekyll::staticfile#modified_time()","jekyll::drops::urldrop#month()","jekyll::relatedposts#most_recent_posts()","jekyll::staticfile#mtime()","jekyll::staticfile::mtimes()","jekyll::drops::drop::mutable()","jekyll::drops::drop::mutable?()","jekyll::drops::urldrop#name()","jekyll::cleaner::new()","jekyll::collection::new()","jekyll::collectionreader::new()","jekyll::commands::serve::servlet::new()","jekyll::converter::new()","jekyll::converters::markdown::kramdownparser::new()","jekyll::converters::markdown::rdiscountparser::new()","jekyll::converters::markdown::redcarpetparser::new()","jekyll::converters::smartypants::new()","jekyll::datareader::new()","jekyll::document::new()","jekyll::drops::drop::new()","jekyll::entryfilter::new()","jekyll::excerpt::new()","jekyll::frontmatterdefaults::new()","jekyll::layout::new()","jekyll::layoutreader::new()","jekyll::liquidrenderer::new()","jekyll::liquidrenderer::file::new()","jekyll::liquidrenderer::table::new()","jekyll::logadapter::new()","jekyll::page::new()","jekyll::pagereader::new()","jekyll::plugin::new()","jekyll::pluginmanager::new()","jekyll::postreader::new()","jekyll::publisher::new()","jekyll::reader::new()","jekyll::regenerator::new()","jekyll::relatedposts::new()","jekyll::renderer::new()","jekyll::site::new()","jekyll::staticfile::new()","jekyll::staticfilereader::new()","jekyll::stevenson::new()","jekyll::tags::highlightblock::new()","jekyll::tags::includetag::new()","jekyll::tags::includetagerror::new()","jekyll::tags::link::new()","jekyll::tags::postcomparer::new()","jekyll::tags::posturl::new()","jekyll::theme::new()","jekyll::themebuilder::new()","jekyll::themebuilder::erbrenderer::new()","jekyll::url::new()","kramdown::parser::smartypants::new()","jekyll::cleaner#new_dirs()","jekyll::cleaner#new_files()","jekyll::drops::documentdrop#next()","jekyll::document#next_doc()","jekyll::deprecator#no_subcommand()","jekyll::filters#normalize_whitespace()","jekyll::filters#number_of_words()","jekyll::cleaner#obsolete_files()","jekyll::excerpt#output()","jekyll::converters::identity#output_ext()","jekyll::converters::markdown#output_ext()","jekyll::converters::smartypants#output_ext()","jekyll::convertible#output_ext()","jekyll::document#output_ext()","jekyll::renderer#output_ext()","jekyll::renderer#output_exts()","jekyll::tags::includetag#outside_site_source?()","jekyll::tags::includerelativetag#page_path()","jekyll::cleaner#parent_dirs()","jekyll::liquidrenderer::file#parse()","jekyll::filters#parse_condition()","jekyll::utils#parse_date()","jekyll::tags::highlightblock#parse_options()","jekyll::tags::includetag#parse_params()","jekyll::excerpt#path()","jekyll::page#path()","jekyll::staticfile#path()","jekyll::theme#path_for()","jekyll::document#permalink()","jekyll::page#permalink()","jekyll::renderer#permalink_ext()","jekyll::convertible#place_in_layout?()","jekyll::document#place_in_layout?()","jekyll::excerpt#place_in_layout?()","jekyll::renderer#place_in_layouts()","jekyll::staticfile#placeholders()","jekyll::pluginmanager#plugin_allowed?()","jekyll::pluginmanager#plugins_path()","jekyll::utils#pluralized_array_from_hash()","jekyll::filters#pop()","jekyll::document#populate_categories()","jekyll::document#populate_tags()","jekyll::site#post_attr_hash()","jekyll::tags::postcomparer#post_date()","jekyll::document#post_read()","jekyll::tags::postcomparer#post_slug()","jekyll::drops::sitedrop#posts()","jekyll::site#posts()","jekyll::commands::new::preserve_source_location?()","jekyll::drops::documentdrop#previous()","jekyll::document#previous_doc()","jekyll::site#print_stats()","jekyll::plugin::priority()","jekyll::hooks::priority_value()","jekyll::commands::build::process()","jekyll::commands::clean::process()","jekyll::commands::doctor::process()","jekyll::commands::new::process()","jekyll::commands::newtheme::process()","jekyll::commands::serve::process()","jekyll::deprecator#process()","jekyll::layout#process()","jekyll::page#process()","jekyll::site#process()","jekyll::command::process_site()","jekyll::publisher#publish?()","jekyll::convertible#published?()","jekyll::document#published?()","jekyll::site#publisher()","jekyll::filters#push()","jekyll::configuration#quiet()","jekyll::configuration#quiet?()","jekyll::collection#read()","jekyll::collectionreader#read()","jekyll::datareader#read()","jekyll::document#read()","jekyll::layoutreader#read()","jekyll::pagereader#read()","jekyll::reader#read()","jekyll::site#read()","jekyll::staticfilereader#read()","jekyll::configuration#read_config_file()","jekyll::configuration#read_config_files()","jekyll::postreader#read_content()","jekyll::datareader#read_data_file()","jekyll::datareader#read_data_to()","jekyll::reader#read_directories()","jekyll::collection#read_document()","jekyll::postreader#read_drafts()","jekyll::tags::includetag#read_file()","jekyll::regenerator#read_metadata()","jekyll::postreader#read_posts()","jekyll::postreader#read_publishable()","jekyll::collection#read_static_file()","jekyll::convertible#read_yaml()","jekyll::theme#realpath_for()","jekyll::tags::includetag#realpath_prefixed_with?()","jekyll::regenerator#regenerate?()","jekyll::regenerator#regenerate_document?()","jekyll::regenerator#regenerate_page?()","jekyll::hooks::register()","jekyll::hooks::register_one()","jekyll::document#related_posts()","jekyll::collection#relative_directory()","jekyll::document#relative_path()","jekyll::page#relative_path()","jekyll::site#relative_permalinks_are_deprecated()","jekyll::entryfilter#relative_to_source()","jekyll::commands::clean::remove()","jekyll::configuration#renamed_key()","jekyll::liquidrenderer::file#render()","jekyll::page#render()","jekyll::site#render()","jekyll::tags::highlightblock#render()","jekyll::tags::includetag#render()","jekyll::tags::link#render()","jekyll::tags::posturl#render()","jekyll::themebuilder::erbrenderer#render()","jekyll::liquidrenderer::file#render!()","jekyll::convertible#render_all_layouts()","jekyll::tags::highlightblock#render_codehighlighter()","jekyll::site#render_docs()","jekyll::convertible#render_liquid()","jekyll::renderer#render_liquid()","jekyll::site#render_pages()","jekyll::tags::highlightblock#render_pygments()","jekyll::tags::highlightblock#render_rouge()","jekyll::tags::includetag#render_variable()","jekyll::convertible#render_with_liquid?()","jekyll::document#render_with_liquid?()","jekyll::converters::markdown::rdiscountparser#replace_generated_toc()","jekyll::cleaner#replaced_files()","object#require_all()","jekyll::pluginmanager::require_from_bundler()","jekyll::pluginmanager#require_gems()","jekyll::external::require_if_present()","jekyll::pluginmanager#require_plugin_files()","jekyll::external::require_with_graceful_fail()","jekyll::liquidrenderer#reset()","jekyll::site#reset()","jekyll::utils::ansi#reset()","jekyll::staticfile::reset_cache()","jekyll::document#respond_to?()","jekyll::collection#respond_to_missing?()","jekyll::reader#retrieve_dirs()","jekyll::reader#retrieve_pages()","jekyll::reader#retrieve_posts()","jekyll::reader#retrieve_static_files()","jekyll::theme#root()","jekyll::themebuilder#root()","jekyll::converters::markdown::redcarpetparser::withrouge#rouge_formatter()","jekyll::renderer#run()","jekyll::plugin::safe()","jekyll::utils#safe_glob()","jekyll::configuration#safe_load_file()","jekyll::filters#sample()","jekyll::datareader#sanitize_filename()","jekyll::collection#sanitize_label()","jekyll::frontmatterdefaults#sanitize_path()","jekyll::url#sanitize_url()","jekyll::tags::highlightblock#sanitized_opts()","jekyll::sanitized_path()","jekyll::convertible#sass_file?()","jekyll::document#sass_file?()","jekyll::theme#sass_path()","jekyll::filters#sassify()","jekyll::commands::new::scaffold_path()","jekyll::commands::new::scaffold_post_content()","jekyll::filters#scssify()","jekyll::commands::serve::servlet#search_file()","jekyll::drops::urldrop#second()","jekyll::commands::serve::server_address()","jekyll::commands::serve::servlet#set_defaults()","jekyll::set_timezone()","jekyll::commands::serve::setup()","jekyll::converters::markdown#setup()","jekyll::converters::markdown::kramdownparser#setup()","jekyll::site#setup()","jekyll::filters#shift()","jekyll::drops::urldrop#short_month()","jekyll::drops::urldrop#short_year()","jekyll::drops::unifiedpayloaddrop#site()","jekyll::site#site_cleaner()","jekyll::site#site_data()","jekyll::site#site_payload()","jekyll::commands::new::site_template()","jekyll::sites()","jekyll::drops::urldrop#slug()","jekyll::filters#slugify()","jekyll::utils#slugify()","jekyll::filters#smartify()","jekyll::filters#sort()","jekyll::reader#sort_files!()","jekyll::filters#sort_input()","jekyll::configuration#source()","jekyll::document#source_file_mtime()","jekyll::regenerator#source_modified_or_dest_missing?()","jekyll::entryfilter#special?()","jekyll::commands::serve::start_callback()","jekyll::liquidrenderer#stats_table()","jekyll::utils#stringify_hash_keys()","jekyll::configuration#stringify_keys()","jekyll::utils::ansi#strip()","jekyll::converters::markdown::kramdownparser#strip_coderay_prefix()","jekyll::utils#strip_heredoc()","jekyll::configuration#style_to_permalink()","jekyll::command::subclasses()","jekyll::utils#symbolize_hash_keys()","jekyll::entryfilter#symlink?()","jekyll::entryfilter#symlink_outside_site_source?()","jekyll::tags::includetag#syntax_example()","jekyll::liquidrenderer::table#table_widths()","jekyll::tags::includerelativetag#tag_includes_dirs()","jekyll::tags::includetag#tag_includes_dirs()","jekyll::tags::link::tag_name()","jekyll::site#tags()","jekyll::page#template()","jekyll::themebuilder#template()","jekyll::themebuilder#template_file()","jekyll::themebuilder::erbrenderer#theme_directories()","jekyll::layoutreader#theme_layout_directory()","jekyll::layoutreader#theme_layout_entries()","jekyll::converters::markdown#third_party_processors()","jekyll::filters#time()","jekyll::drops::urldrop#title()","jekyll::utils#titleize_slug()","jekyll::drops::drop#to_h()","jekyll::drops::jekylldrop#to_h()","jekyll::drops::drop#to_hash()","jekyll::filters#to_integer()","jekyll::drops::drop#to_json()","jekyll::drops::jekylldrop#to_json()","jekyll::collection#to_liquid()","jekyll::convertible#to_liquid()","jekyll::document#to_liquid()","jekyll::excerpt#to_liquid()","jekyll::site#to_liquid()","jekyll::staticfile#to_liquid()","jekyll::convertible#to_s()","jekyll::document#to_s()","jekyll::drops::collectiondrop#to_s()","jekyll::excerpt#to_s()","jekyll::liquidrenderer::table#to_s()","jekyll::url#to_s()","jekyll::convertible#transform()","jekyll::utils#transform_keys()","jekyll::hooks::trigger()","jekyll::document#trigger_hooks()","jekyll::excerpt#trigger_hooks()","jekyll::page#trigger_hooks()","jekyll::convertible#type()","jekyll::staticfile#type()","jekyll::url::unescape_path()","jekyll::filters#unshift()","jekyll::frontmatterdefaults#update_deprecated_types()","jekyll::filters#uri_escape()","jekyll::document#url()","jekyll::page#url()","jekyll::staticfile#url()","jekyll::document#url_placeholders()","jekyll::page#url_placeholders()","jekyll::collection#url_template()","jekyll::document#url_template()","jekyll::commands::doctor::urls_only_differ_by_case()","jekyll::themebuilder#user_email()","jekyll::themebuilder#user_name()","jekyll::frontmatterdefaults#valid?()","jekyll::tags::includetag#valid_include_file?()","jekyll::converters::markdown#valid_processors()","jekyll::frontmatterdefaults#valid_sets()","jekyll::commands::serve::servlet#validate_and_ensure_charset()","jekyll::convertible#validate_data!()","jekyll::tags::includetag#validate_file_name()","jekyll::tags::includetag#validate_params()","jekyll::convertible#validate_permalink!()","jekyll::utils#value_from_plural_key()","jekyll::utils#value_from_singular_key()","jekyll::configuration#verbose()","jekyll::configuration#verbose?()","jekyll::drops::jekylldrop#version()","jekyll::logadapter#warn()","jekyll::stevenson#warn()","jekyll::liquidrenderer::file#warnings()","jekyll::commands::build::watch()","jekyll::commands::serve::webrick_opts()","jekyll::filters#where()","jekyll::filters#where_exp()","jekyll::pluginmanager#whitelist()","jekyll::layoutreader#within()","jekyll::convertible#write()","jekyll::document#write()","jekyll::site#write()","jekyll::staticfile#write()","jekyll::collection#write?()","jekyll::document#write?()","jekyll::page#write?()","jekyll::staticfile#write?()","jekyll::themebuilder#write_file()","jekyll::regenerator#write_metadata()","jekyll::filters#xml_escape()","jekyll::drops::urldrop#y_day()","jekyll::document#yaml_file?()","jekyll::drops::urldrop#year()","","","","","","","","","","","","","",""],"info":[["Jekyll","","Jekyll.html","","<p>Frozen-string-literal: true Encoding: utf-8\n<p>Convertible provides methods for converting a pagelike item …\n"],["Jekyll::Cleaner","","Jekyll/Cleaner.html","","<p>Handles the cleanup of a site&#39;s destination before it is built.\n"],["Jekyll::Collection","","Jekyll/Collection.html","",""],["Jekyll::CollectionReader","","Jekyll/CollectionReader.html","",""],["Jekyll::Command","","Jekyll/Command.html","",""],["Jekyll::Commands","","Jekyll/Commands.html","",""],["Jekyll::Commands::Build","","Jekyll/Commands/Build.html","",""],["Jekyll::Commands::Clean","","Jekyll/Commands/Clean.html","",""],["Jekyll::Commands::Doctor","","Jekyll/Commands/Doctor.html","",""],["Jekyll::Commands::Help","","Jekyll/Commands/Help.html","",""],["Jekyll::Commands::New","","Jekyll/Commands/New.html","",""],["Jekyll::Commands::NewTheme","","Jekyll/Commands/NewTheme.html","",""],["Jekyll::Commands::Serve","","Jekyll/Commands/Serve.html","",""],["Jekyll::Commands::Serve::Servlet","","Jekyll/Commands/Serve/Servlet.html","",""],["Jekyll::Configuration","","Jekyll/Configuration.html","",""],["Jekyll::Converter","","Jekyll/Converter.html","",""],["Jekyll::Converters","","Jekyll/Converters.html","",""],["Jekyll::Converters::Identity","","Jekyll/Converters/Identity.html","",""],["Jekyll::Converters::Markdown","","Jekyll/Converters/Markdown.html","",""],["Jekyll::Converters::Markdown::KramdownParser","","Jekyll/Converters/Markdown/KramdownParser.html","",""],["Jekyll::Converters::Markdown::RDiscountParser","","Jekyll/Converters/Markdown/RDiscountParser.html","",""],["Jekyll::Converters::Markdown::RedcarpetParser","","Jekyll/Converters/Markdown/RedcarpetParser.html","",""],["Jekyll::Converters::Markdown::RedcarpetParser::CommonMethods","","Jekyll/Converters/Markdown/RedcarpetParser/CommonMethods.html","",""],["Jekyll::Converters::Markdown::RedcarpetParser::WithPygments","","Jekyll/Converters/Markdown/RedcarpetParser/WithPygments.html","",""],["Jekyll::Converters::Markdown::RedcarpetParser::WithRouge","","Jekyll/Converters/Markdown/RedcarpetParser/WithRouge.html","",""],["Jekyll::Converters::Markdown::RedcarpetParser::WithoutHighlighting","","Jekyll/Converters/Markdown/RedcarpetParser/WithoutHighlighting.html","",""],["Jekyll::Converters::SmartyPants","","Jekyll/Converters/SmartyPants.html","",""],["Jekyll::Convertible","","Jekyll/Convertible.html","",""],["Jekyll::DataReader","","Jekyll/DataReader.html","",""],["Jekyll::Deprecator","","Jekyll/Deprecator.html","",""],["Jekyll::Document","","Jekyll/Document.html","",""],["Jekyll::Drops","","Jekyll/Drops.html","",""],["Jekyll::Drops::CollectionDrop","","Jekyll/Drops/CollectionDrop.html","",""],["Jekyll::Drops::DocumentDrop","","Jekyll/Drops/DocumentDrop.html","",""],["Jekyll::Drops::Drop","","Jekyll/Drops/Drop.html","",""],["Jekyll::Drops::ExcerptDrop","","Jekyll/Drops/ExcerptDrop.html","",""],["Jekyll::Drops::JekyllDrop","","Jekyll/Drops/JekyllDrop.html","",""],["Jekyll::Drops::SiteDrop","","Jekyll/Drops/SiteDrop.html","",""],["Jekyll::Drops::UnifiedPayloadDrop","","Jekyll/Drops/UnifiedPayloadDrop.html","",""],["Jekyll::Drops::UrlDrop","","Jekyll/Drops/UrlDrop.html","",""],["Jekyll::EntryFilter","","Jekyll/EntryFilter.html","",""],["Jekyll::Errors","","Jekyll/Errors.html","",""],["Jekyll::Excerpt","","Jekyll/Excerpt.html","",""],["Jekyll::External","","Jekyll/External.html","",""],["Jekyll::Filters","","Jekyll/Filters.html","",""],["Jekyll::FrontmatterDefaults","","Jekyll/FrontmatterDefaults.html","","<p>This class handles custom defaults for YAML frontmatter settings. These are\nset in _config.yml and apply …\n"],["Jekyll::Hooks","","Jekyll/Hooks.html","",""],["Jekyll::Layout","","Jekyll/Layout.html","",""],["Jekyll::LayoutReader","","Jekyll/LayoutReader.html","",""],["Jekyll::LiquidExtensions","","Jekyll/LiquidExtensions.html","",""],["Jekyll::LiquidRenderer","","Jekyll/LiquidRenderer.html","",""],["Jekyll::LiquidRenderer::File","","Jekyll/LiquidRenderer/File.html","",""],["Jekyll::LiquidRenderer::Table","","Jekyll/LiquidRenderer/Table.html","",""],["Jekyll::LogAdapter","","Jekyll/LogAdapter.html","",""],["Jekyll::Page","","Jekyll/Page.html","",""],["Jekyll::PageReader","","Jekyll/PageReader.html","",""],["Jekyll::Plugin","","Jekyll/Plugin.html","",""],["Jekyll::PluginManager","","Jekyll/PluginManager.html","",""],["Jekyll::PostReader","","Jekyll/PostReader.html","",""],["Jekyll::Publisher","","Jekyll/Publisher.html","",""],["Jekyll::Reader","","Jekyll/Reader.html","",""],["Jekyll::Regenerator","","Jekyll/Regenerator.html","",""],["Jekyll::RelatedPosts","","Jekyll/RelatedPosts.html","",""],["Jekyll::Renderer","","Jekyll/Renderer.html","",""],["Jekyll::Site","","Jekyll/Site.html","",""],["Jekyll::StaticFile","","Jekyll/StaticFile.html","",""],["Jekyll::StaticFileReader","","Jekyll/StaticFileReader.html","",""],["Jekyll::Stevenson","","Jekyll/Stevenson.html","",""],["Jekyll::Tags","","Jekyll/Tags.html","",""],["Jekyll::Tags::HighlightBlock","","Jekyll/Tags/HighlightBlock.html","",""],["Jekyll::Tags::IncludeRelativeTag","","Jekyll/Tags/IncludeRelativeTag.html","",""],["Jekyll::Tags::IncludeTag","","Jekyll/Tags/IncludeTag.html","",""],["Jekyll::Tags::IncludeTagError","","Jekyll/Tags/IncludeTagError.html","",""],["Jekyll::Tags::Link","","Jekyll/Tags/Link.html","",""],["Jekyll::Tags::PostComparer","","Jekyll/Tags/PostComparer.html","",""],["Jekyll::Tags::PostUrl","","Jekyll/Tags/PostUrl.html","",""],["Jekyll::Theme","","Jekyll/Theme.html","",""],["Jekyll::ThemeBuilder","","Jekyll/ThemeBuilder.html","",""],["Jekyll::ThemeBuilder::ERBRenderer","","Jekyll/ThemeBuilder/ERBRenderer.html","",""],["Jekyll::URL","","Jekyll/URL.html","",""],["Jekyll::Utils","","Jekyll/Utils.html","",""],["Jekyll::Utils::Ansi","","Jekyll/Utils/Ansi.html","",""],["Jekyll::Utils::Platforms","","Jekyll/Utils/Platforms.html","",""],["Jekyll::Utils::Platforms::RbConfig","","Jekyll/Utils/Platforms/RbConfig.html","",""],["Kramdown","","Kramdown.html","",""],["Kramdown::Parser","","Kramdown/Parser.html","",""],["Kramdown::Parser::SmartyPants","","Kramdown/Parser/SmartyPants.html","",""],["Liquid","","Liquid.html","",""],["Object","","Object.html","",""],["SafeYAML","","SafeYAML.html","",""],["<=>","Jekyll::Document","Jekyll/Document.html#method-i-3C-3D-3E","(other)","<p>Compare this document against another document. Comparison is a comparison\nbetween the 2 paths of the …\n"],["<=>","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-3C-3D-3E","(other)",""],["<=>","Jekyll::Plugin","Jekyll/Plugin.html#method-c-3C-3D-3E","(other)","<p>Spaceship is priority [higher -&gt; lower]\n<p>other - The class to be compared.\n<p>Returns -1, 0, 1.\n"],["<=>","Jekyll::Plugin","Jekyll/Plugin.html#method-i-3C-3D-3E","(other)","<p>Spaceship is priority [higher -&gt; lower]\n<p>other - The class to be compared.\n<p>Returns -1, 0, 1.\n"],["==","Jekyll::Tags::PostComparer","Jekyll/Tags/PostComparer.html#method-i-3D-3D","(other)",""],["[]","Jekyll::Convertible","Jekyll/Convertible.html#method-i-5B-5D","(property)","<p>Accessor for data properties by Liquid.\n<p>property - The String name of the property to retrieve.\n<p>Returns …\n"],["[]","Jekyll::Document","Jekyll/Document.html#method-i-5B-5D","(key)",""],["[]","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-5B-5D","(key)","<p>Access a method in the Drop or a field in the underlying hash data. If\nmutable, checks the mutations …\n"],["[]","Jekyll::Drops::SiteDrop","Jekyll/Drops/SiteDrop.html#method-i-5B-5D","(key)",""],["[]=","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-5B-5D-3D","(key, val)","<p>Set a field in the Drop. If mutable, sets in the mutations and returns. If\nnot mutable, checks first …\n"],["abort_with","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-abort_with","(topic, message = nil)","<p>Public: Print an error message and immediately abort the process\n<p>topic - the topic of the message, e.g. …\n"],["add","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-add","(path)","<p>Add a path to the metadata\n<p>Returns true, also on failure.\n"],["add","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-add","(severity, message = nil, progname = nil)",""],["add_build_options","Jekyll::Command","Jekyll/Command.html#method-c-add_build_options","(c)","<p>Add common options to a command for building configuration\n<p>c - the Jekyll::Command to add these options …\n"],["add_code_tag","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-i-add_code_tag","(code)",""],["add_code_tags","Jekyll::Converters::Markdown::RedcarpetParser::CommonMethods","Jekyll/Converters/Markdown/RedcarpetParser/CommonMethods.html#method-i-add_code_tags","(code, lang)",""],["add_default_collections","Jekyll::Configuration","Jekyll/Configuration.html#method-i-add_default_collections","()",""],["add_dependency","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-add_dependency","(path, dependency)","<p>Add a dependency of a path\n<p>Returns nothing.\n"],["add_include_to_dependency","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-add_include_to_dependency","(site, path, context)",""],["add_permalink_suffix","Jekyll::Utils","Jekyll/Utils.html#method-i-add_permalink_suffix","(template, permalink_style)","<p>Add an appropriate suffix to template so that it matches the specified\npermalink style.\n<p>template - permalink …\n"],["adjust_verbosity","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-adjust_verbosity","(options = {})",""],["all","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-all","(path, type)","<p>Collects a hash with all default values for a page or post\n<p>path - the relative path of the page or post …\n"],["applies?","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-applies-3F","(scope, path, type)","<p>Checks if a given default setting scope matches the given path and type\n<p>scope - the hash indicating the …\n"],["applies_path?","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-applies_path-3F","(scope, path)",""],["applies_type?","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-applies_type-3F","(scope, type)","<p>Determines whether the scope applies to type. The scope applies to the type\nif:\n\n<pre>1. no &#39;type&#39; is specified ...</pre>\n"],["arg_is_present?","Jekyll::Deprecator","Jekyll/Deprecator.html#method-i-arg_is_present-3F","(args, deprecated_argument, message)",""],["array_to_sentence_string","Jekyll::Filters","Jekyll/Filters.html#method-i-array_to_sentence_string","(array)","<p>Join an array of things into a string by separating with commas and the\nword “and” for the …\n"],["as_liquid","Jekyll::Filters","Jekyll/Filters.html#method-i-as_liquid","(item)",""],["asset_file?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-asset_file-3F","()","<p>Determine whether the document is an asset file. Asset files include\nCoffeeScript files and Sass/SCSS …\n"],["asset_file?","Jekyll::Document","Jekyll/Document.html#method-i-asset_file-3F","()","<p>Determine whether the document is an asset file. Asset files include\nCoffeeScript files and Sass/SCSS …\n"],["backup?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-backup-3F","(entry)",""],["backwards_compatibilize","Jekyll::Configuration","Jekyll/Configuration.html#method-i-backwards_compatibilize","()","<p>Public: Ensure the proper options are set in the configuration to allow for\nbackwards-compatibility with …\n"],["base_directory","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-base_directory","()",""],["basename","Jekyll::Document","Jekyll/Document.html#method-i-basename","()","<p>The base filename of the document.\n<p>Returns the base filename of the document.\n"],["basename_without_ext","Jekyll::Document","Jekyll/Document.html#method-i-basename_without_ext","()","<p>The base filename of the document, without the file extname.\n<p>Returns the basename without the file extname. …\n"],["blessed_gems","Jekyll::External","Jekyll/External.html#method-c-blessed_gems","()","<p>Gems that, if installed, should be loaded. Usually contain subcommands.\n"],["block_code","Jekyll::Converters::Markdown::RedcarpetParser::WithPygments","Jekyll/Converters/Markdown/RedcarpetParser/WithPygments.html#method-i-block_code","(code, lang)",""],["block_code","Jekyll::Converters::Markdown::RedcarpetParser::WithRouge","Jekyll/Converters/Markdown/RedcarpetParser/WithRouge.html#method-i-block_code","(code, lang)",""],["block_code","Jekyll::Converters::Markdown::RedcarpetParser::WithoutHighlighting","Jekyll/Converters/Markdown/RedcarpetParser/WithoutHighlighting.html#method-i-block_code","(code, lang)",""],["boot_or_detach","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-boot_or_detach","(server, opts)","<p>Keep in our area with a thread or detach the server as requested by the\nuser.  This method determines …\n"],["build","Jekyll::Commands::Build","Jekyll/Commands/Build.html#method-c-build","(site, options)","<p>Build your Jekyll site.\n<p>site - the Jekyll::Site instance to build options - A Hash of options\npassed to …\n"],["build","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-build","()",""],["build_index","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-build_index","()",""],["can_be_published?","Jekyll::Publisher","Jekyll/Publisher.html#method-i-can_be_published-3F","(thing)",""],["case_insensitive_urls","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-case_insensitive_urls","(things, destination)",""],["catch_inheritance","Jekyll::Plugin","Jekyll/Plugin.html#method-c-catch_inheritance","(const)",""],["categories","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-categories","()",""],["categories","Jekyll::Site","Jekyll/Site.html#method-i-categories","()",""],["categories_from_path","Jekyll::Document","Jekyll/Document.html#method-i-categories_from_path","(special_dir)","<p>Add superdirectories of the special_dir to categories. In the case of\nes/_posts, &#39;es&#39; is added …\n"],["cgi_escape","Jekyll::Filters","Jekyll/Filters.html#method-i-cgi_escape","(input)","<p>CGI escape a string for use in a URL. Replaces any special characters with\nappropriate %XX replacements. …\n"],["check_auto","Jekyll::Configuration","Jekyll/Configuration.html#method-i-check_auto","(config)",""],["check_coderay","Jekyll::Configuration","Jekyll/Configuration.html#method-i-check_coderay","(config)",""],["check_config_is_hash!","Jekyll::Configuration","Jekyll/Configuration.html#method-i-check_config_is_hash-21","(extracted_config, file)","<p>Private: Checks if a given config is a hash\n<p>extracted_config - the value to check file - the file from …\n"],["check_include_exclude","Jekyll::Configuration","Jekyll/Configuration.html#method-i-check_include_exclude","(config)",""],["check_maruku","Jekyll::Configuration","Jekyll/Configuration.html#method-i-check_maruku","(config)",""],["check_pygments","Jekyll::Configuration","Jekyll/Configuration.html#method-i-check_pygments","(config)",""],["check_server","Jekyll::Configuration","Jekyll/Configuration.html#method-i-check_server","(config)",""],["class_with_proper_highlighter","Jekyll::Converters::Markdown::RedcarpetParser","Jekyll/Converters/Markdown/RedcarpetParser.html#method-i-class_with_proper_highlighter","(highlighter)",""],["cleaned_relative_path","Jekyll::Document","Jekyll/Document.html#method-i-cleaned_relative_path","()","<p>Produces a “cleaned” relative path. The “cleaned” relative path is the\nrelative path …\n"],["cleanup","Jekyll::Site","Jekyll/Site.html#method-i-cleanup","()","<p>Remove orphaned files and empty directories in destination.\n<p>Returns nothing.\n"],["cleanup!","Jekyll::Cleaner","Jekyll/Cleaner.html#method-i-cleanup-21","()","<p>Cleans up the site&#39;s destination directory\n"],["clear","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-clear","()","<p>Clear the metadata and cache\n<p>Returns nothing\n"],["clear_cache","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-clear_cache","()","<p>Clear just the cache\n<p>Returns nothing\n"],["close","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-close","()",""],["code_wrap","Jekyll::Converters::Markdown::RedcarpetParser::WithoutHighlighting","Jekyll/Converters/Markdown/RedcarpetParser/WithoutHighlighting.html#method-i-code_wrap","(code)",""],["coffeescript_file?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-coffeescript_file-3F","()","<p>Determine whether the document is a CoffeeScript file.\n<p>Returns true if extname == .coffee, false otherwise. …\n"],["coffeescript_file?","Jekyll::Document","Jekyll/Document.html#method-i-coffeescript_file-3F","()","<p>Determine whether the document is a CoffeeScript file.\n<p>Returns true if extname == .coffee, false otherwise. …\n"],["collapse_document","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-collapse_document","(doc)","<p>Generate a Hash which breaks the recursive chain. Certain fields which are\nnormally available are omitted. …\n"],["collect_urls","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-collect_urls","(urls, things, destination)",""],["collection","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-collection","()",""],["collection","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-collection","()",""],["collection_dir","Jekyll::Collection","Jekyll/Collection.html#method-i-collection_dir","(*files)","<p>The full path to the directory containing the collection, with\n\n<pre>optional subpaths.</pre>\n<p>*files - (optional) any …\n"],["collection_names","Jekyll::Site","Jekyll/Site.html#method-i-collection_names","()","<p>The list of collection names.\n<p>Returns an array of collection names from the configuration,\n\n<pre>or an empty ...</pre>\n"],["collections","Jekyll::Drops::SiteDrop","Jekyll/Drops/SiteDrop.html#method-i-collections","()",""],["collections","Jekyll::Site","Jekyll/Site.html#method-i-collections","()","<p>The list of collections and their corresponding Jekyll::Collection\ninstances. If config is set, a new …\n"],["config=","Jekyll::Site","Jekyll/Site.html#method-i-config-3D","(config)","<p>Public: Set the site&#39;s configuration. This handles side-effects caused\nby changing values in the …\n"],["config_files","Jekyll::Configuration","Jekyll/Configuration.html#method-i-config_files","(override)","<p>Public: Generate list of configuration files from the override\n<p>override - the command-line options hash …\n"],["configuration","Jekyll","Jekyll.html#method-c-configuration","(override = {})","<p>Public: Generate a Jekyll configuration Hash by merging the default options\nwith anything in _config.yml …\n"],["configuration_from_options","Jekyll::Command","Jekyll/Command.html#method-c-configuration_from_options","(options)","<p>Create a full Jekyll configuration with the options passed in as overrides\n<p>options - the configuration …\n"],["configure_file_read_opts","Jekyll::Site","Jekyll/Site.html#method-i-configure_file_read_opts","()",""],["configure_include_paths","Jekyll::Site","Jekyll/Site.html#method-i-configure_include_paths","()",""],["configure_plugins","Jekyll::Site","Jekyll/Site.html#method-i-configure_plugins","()",""],["configure_sass","Jekyll::Theme","Jekyll/Theme.html#method-i-configure_sass","()",""],["configure_theme","Jekyll::Site","Jekyll/Site.html#method-i-configure_theme","()",""],["conflicting_urls","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-conflicting_urls","(site)",""],["conscientious_require","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-conscientious_require","()","<p>Require all the plugins which are allowed.\n<p>Returns nothing\n"],["content_methods","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-content_methods","()","<p>Generates a list of strings which correspond to content getter methods.\n<p>Returns an Array of strings which …\n"],["convert","Jekyll::Converters::Identity","Jekyll/Converters/Identity.html#method-i-convert","(content)",""],["convert","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-convert","(content)",""],["convert","Jekyll::Converters::Markdown::KramdownParser","Jekyll/Converters/Markdown/KramdownParser.html#method-i-convert","(content)",""],["convert","Jekyll::Converters::Markdown::RDiscountParser","Jekyll/Converters/Markdown/RDiscountParser.html#method-i-convert","(content)",""],["convert","Jekyll::Converters::Markdown::RedcarpetParser","Jekyll/Converters/Markdown/RedcarpetParser.html#method-i-convert","(content)",""],["convert","Jekyll::Converters::SmartyPants","Jekyll/Converters/SmartyPants.html#method-i-convert","(content)",""],["convert","Jekyll::Renderer","Jekyll/Renderer.html#method-i-convert","(content)","<p>Convert the given content using the converters which match this\nrenderer&#39;s document.\n<p>content - the …\n"],["converter_output_ext","Jekyll::Renderer","Jekyll/Renderer.html#method-i-converter_output_ext","()",""],["converters","Jekyll::Convertible","Jekyll/Convertible.html#method-i-converters","()","<p>Determine which converter to use based on this convertible&#39;s extension.\n<p>Returns the Converter instance. …\n"],["converters","Jekyll::Renderer","Jekyll/Renderer.html#method-i-converters","()","<p>Determine which converters to use based on this document&#39;s extension.\n<p>Returns an array of Converter …\n"],["copy_file","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-copy_file","(dest_path)",""],["create!","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-create-21","()",""],["create_accessories","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-create_accessories","()",""],["create_blank_site","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-create_blank_site","(path)",""],["create_directories","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-create_directories","()",""],["create_error_page","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-create_error_page","()",""],["create_gemspec","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-create_gemspec","()",""],["create_sample_files","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-create_sample_files","(path)",""],["create_site","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-create_site","(new_blog_path)",""],["create_starter_files","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-create_starter_files","()",""],["csv_to_array","Jekyll::Configuration","Jekyll/Configuration.html#method-i-csv_to_array","(csv)","<p>Public: Split a CSV string into an array containing its values\n<p>csv - the string of comma-separated values …\n"],["custom_class_allowed?","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-custom_class_allowed-3F","(parser_name)","<p>Private: Determine whether a class name is an allowed custom\n\n<pre>markdown class name.</pre>\n<p>parser_name - the name …\n"],["custom_processor","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-custom_processor","()",""],["data","Jekyll::Document","Jekyll/Document.html#method-i-data","()","<p>Fetch the Document&#39;s data.\n<p>Returns a Hash containing the data. An empty hash is returned if\n\n<pre>no data ...</pre>\n"],["data","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-data","()","<p>Fetch YAML front-matter data from related doc, without layout key\n<p>Returns Hash of doc data\n"],["data_for_table","Jekyll::LiquidRenderer::Table","Jekyll/LiquidRenderer/Table.html#method-i-data_for_table","(n)",""],["date","Jekyll::Document","Jekyll/Document.html#method-i-date","()",""],["date_to_long_string","Jekyll::Filters","Jekyll/Filters.html#method-i-date_to_long_string","(date)","<p>Format a date in long format e.g. “27 January 2011”.\n<p>date - The Time to format.\n<p>Returns the formatted …\n"],["date_to_rfc822","Jekyll::Filters","Jekyll/Filters.html#method-i-date_to_rfc822","(date)","<p>Format a date according to RFC-822\n<p>date - The Time to format.\n<p>Examples\n"],["date_to_string","Jekyll::Filters","Jekyll/Filters.html#method-i-date_to_string","(date)","<p>Format a date in short format e.g. “27 Jan 2011”.\n<p>date - the Time to format.\n<p>Returns the formatting …\n"],["date_to_xmlschema","Jekyll::Filters","Jekyll/Filters.html#method-i-date_to_xmlschema","(date)","<p>Format a date for use in XML.\n<p>date - The Time to format.\n<p>Examples\n"],["day","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-day","()",""],["debug","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-debug","(topic, message = nil)","<p>Public: Print a debug message\n<p>topic - the topic of the message, e.g. “Configuration file”, “Deprecation”,\n…\n"],["deep_merge_hashes","Jekyll::Utils","Jekyll/Utils.html#method-i-deep_merge_hashes","(master_hash, other_hash)","<p>Non-destructive version of deep_merge_hashes! See that method.\n<p>Returns the merged hashes.\n"],["deep_merge_hashes!","Jekyll::Utils","Jekyll/Utils.html#method-i-deep_merge_hashes-21","(target, overwrite)","<p>Merges a master hash with another hash, recursively.\n<p>master_hash - the “parent” hash whose values …\n"],["defaults","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-defaults","()","<p>Returns the front matter defaults defined for the file&#39;s URL and/or\ntype as defined in _config.yml. …\n"],["defaults_deprecate_type","Jekyll::Deprecator","Jekyll/Deprecator.html#method-i-defaults_deprecate_type","(old, current)",""],["deprecated_equality","Jekyll::Tags::PostComparer","Jekyll/Tags/PostComparer.html#method-i-deprecated_equality","(other)",""],["deprecated_relative_permalinks","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-deprecated_relative_permalinks","(site)",""],["deprecation_checks","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-deprecation_checks","()",""],["deprecation_message","Jekyll::Deprecator","Jekyll/Deprecator.html#method-i-deprecation_message","(message)",""],["derive_base_directory","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-derive_base_directory","(site, base_dir)",""],["descendants","Jekyll::Plugin","Jekyll/Plugin.html#method-c-descendants","()",""],["destination","Jekyll::Document","Jekyll/Document.html#method-i-destination","(base_directory)","<p>The full path to the output file.\n<p>base_directory - the base path of the output directory\n<p>Returns the full …\n"],["destination","Jekyll::Page","Jekyll/Page.html#method-i-destination","(dest)","<p>Obtain destination path.\n<p>dest - The String path to the destination dir.\n<p>Returns the destination file path …\n"],["destination","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-destination","(dest)","<p>Obtain destination path.\n<p>dest - The String path to the destination dir.\n<p>Returns destination file path. …\n"],["destination_rel_dir","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-destination_rel_dir","()",""],["dir","Jekyll::Page","Jekyll/Page.html#method-i-dir","()","<p>The generated directory into which the page will be placed upon generation.\nThis is derived from the …\n"],["directory","Jekyll::Collection","Jekyll/Collection.html#method-i-directory","()","<p>The full path to the directory containing the collection.\n<p>Returns a String containing th directory name …\n"],["disabled?","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-disabled-3F","()","<p>Check if metadata has been disabled\n<p>Returns a Boolean (true for disabled, false for enabled).\n"],["display","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-display","(output)",""],["do_GET","Jekyll::Commands::Serve::Servlet","Jekyll/Commands/Serve/Servlet.html#method-i-do_GET","(req, res)","<p>rubocop:disable Style/MethodName\n"],["do_layout","Jekyll::Convertible","Jekyll/Convertible.html#method-i-do_layout","(payload, layouts)","<p>Add any necessary layouts to this convertible document.\n<p>payload - The site payload Drop or Hash. layouts …\n"],["docs","Jekyll::Collection","Jekyll/Collection.html#method-i-docs","()","<p>Fetch the Documents in this collection. Defaults to an empty array if no\ndocuments have been read in. …\n"],["docs_to_write","Jekyll::Site","Jekyll/Site.html#method-i-docs_to_write","()","<p>Get the to be written documents\n<p>Returns an Array of Documents which should be written\n"],["documents","Jekyll::Site","Jekyll/Site.html#method-i-documents","()","<p>Get all the documents\n<p>Returns an Array of all Documents\n"],["draft?","Jekyll::Document","Jekyll/Document.html#method-i-draft-3F","()","<p>Returns whether the document is a draft. This is only the case if the\ndocument is in the &#39;posts&#39; …\n"],["duplicable?","Jekyll::Utils","Jekyll/Utils.html#method-i-duplicable-3F","(obj)",""],["duplicate_frozen_values","Jekyll::Utils","Jekyll/Utils.html#method-i-duplicate_frozen_values","(target)",""],["each","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-each","()",""],["each_key","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-each_key","(&block)","<p>Collects all the keys and passes each to the block in turn.\n<p>block - a block which accepts one argument, …\n"],["each_site_file","Jekyll::Site","Jekyll/Site.html#method-i-each_site_file","()",""],["enable_logging","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-enable_logging","(opts)","<p>Make the stack verbose if the user requests it.\n"],["enable_ssl","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-enable_ssl","(opts)","<p>rubocop:disable Metrics/AbcSize\n"],["ensure_not_in_dest","Jekyll::Site","Jekyll/Site.html#method-i-ensure_not_in_dest","()","<p>Check that the destination dir isn&#39;t the source dir or a directory\nparent to the source dir.\n"],["ensure_time!","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-ensure_time-21","(set)",""],["entries","Jekyll::Collection","Jekyll/Collection.html#method-i-entries","()","<p>All the entries in this collection.\n<p>Returns an Array of file paths to the documents in this collection …\n"],["entries_in","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-entries_in","(dir)",""],["entry_filter","Jekyll::Collection","Jekyll/Collection.html#method-i-entry_filter","()","<p>The entry filter for this collection. Creates an instance of\nJekyll::EntryFilter.\n<p>Returns the instance …\n"],["env","Jekyll","Jekyll.html#method-c-env","()","<p>Public: Tells you which Jekyll environment you are building in so you can\nskip tasks if you need to. …\n"],["environment","Jekyll::Drops::JekyllDrop","Jekyll/Drops/JekyllDrop.html#method-i-environment","()",""],["erb","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-erb","()",""],["error","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-error","(topic, message = nil)","<p>Public: Print an error message\n<p>topic - the topic of the message, e.g. “Configuration file”, …\n"],["error","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-error","(progname = nil, &block)","<p>Log an <code>ERROR</code> message\n"],["escape_path","Jekyll::URL","Jekyll/URL.html#method-c-escape_path","(path)","<p>Escapes a path to be a valid URL path segment\n<p>path - The path to be escaped.\n<p>Examples:\n"],["excerpt","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-excerpt","()",""],["excerpt","Jekyll::Drops::ExcerptDrop","Jekyll/Drops/ExcerptDrop.html#method-i-excerpt","()",""],["excerpt_separator","Jekyll::Document","Jekyll/Document.html#method-i-excerpt_separator","()","<p>The Document excerpt_separator, from the YAML Front-Matter or site default\nexcerpt_separator value\n<p>Returns …\n"],["excluded?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-excluded-3F","(entry)",""],["existing_file_modified?","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-existing_file_modified-3F","(path)",""],["existing_files","Jekyll::Cleaner","Jekyll/Cleaner.html#method-i-existing_files","()","<p>Private: The list of existing files, apart from those included in\nkeep_files and hidden files.\n<p>Returns …\n"],["exists?","Jekyll::Collection","Jekyll/Collection.html#method-i-exists-3F","()","<p>Checks whether the directory “exists” for this collection. The directory\nmust exist on the …\n"],["extname_list","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-extname_list","()",""],["extract_excerpt","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-extract_excerpt","(doc_content)","<p>Internal: Extract excerpt from the content\n<p>By default excerpt is your first paragraph of a doc: everything …\n"],["extract_metadata","Jekyll::Collection","Jekyll/Collection.html#method-i-extract_metadata","()","<p>Extract options for this collection from the site configuration.\n<p>Returns the metadata for this collection …\n"],["fallback_data","Jekyll::Drops::UnifiedPayloadDrop","Jekyll/Drops/UnifiedPayloadDrop.html#method-i-fallback_data","()",""],["fetch","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-fetch","(key, default = nil, &block)","<p>Imitate Hash.fetch method in Drop\n<p>Returns value if key is present in Drop, otherwise returns default value …\n"],["file","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-file","(filename)",""],["file_handler_opts","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-file_handler_opts","()","<p>Recreate NondisclosureName under utf-8 circumstance\n"],["file_read_opts","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-file_read_opts","(context)","<p>Grab file read opts in the context\n"],["files","Jekyll::Collection","Jekyll/Collection.html#method-i-files","()","<p>Fetch the static files in this collection. Defaults to an empty array if no\nstatic files have been read …\n"],["filter","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-filter","(entries)",""],["filter_entries","Jekyll::Reader","Jekyll/Reader.html#method-i-filter_entries","(entries, base_directory = nil)","<p>Filter out any files/directories that are hidden or backup files (start\nwith “.” or “#” …\n"],["filtered_entries","Jekyll::Collection","Jekyll/Collection.html#method-i-filtered_entries","()","<p>Filtered version of the entries in this collection. See\n`Jekyll::EntryFilter#filter` for more information. …\n"],["find","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-find","(path, type, setting)","<p>Finds a default value for a given setting, filtered by path and type\n<p>path - the path (relative to the …\n"],["find_converter_instance","Jekyll::Site","Jekyll/Site.html#method-i-find_converter_instance","(klass)","<p>Get the implementation class for the given Converter. Returns the Converter\ninstance implementing the …\n"],["fix_common_issues","Jekyll::Configuration","Jekyll/Configuration.html#method-i-fix_common_issues","()",""],["force","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-force","(path)","<p>Force a path to regenerate\n<p>Returns true.\n"],["format_bytes","Jekyll::LiquidRenderer::Table","Jekyll/LiquidRenderer/Table.html#method-i-format_bytes","(bytes)",""],["format_error","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-c-format_error","(e, path)",""],["formatted_topic","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-formatted_topic","(topic)","<p>Internal: Format the topic\n<p>topic - the topic of the message, e.g. “Configuration file”, “Deprecation”,\n…\n"],["from","Jekyll::Configuration","Jekyll/Configuration.html#method-c-from","(user_config)","<p>Static: Produce a Configuration ready for use in a Site. It takes the\ninput, fills in the defaults where …\n"],["frontmatter_defaults","Jekyll::Site","Jekyll/Site.html#method-i-frontmatter_defaults","()","<p>Returns the FrontmatterDefaults or creates a new FrontmatterDefaults if it\ndoesn&#39;t already exist. …\n"],["fsnotify_buggy?","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-fsnotify_buggy-3F","(_site)",""],["gemfile_contents","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-gemfile_contents","()",""],["gemspec","Jekyll::Theme","Jekyll/Theme.html#method-i-gemspec","()",""],["generate","Jekyll::Site","Jekyll/Site.html#method-i-generate","()","<p>Run each of the Generators.\n<p>Returns nothing.\n"],["generate_excerpt","Jekyll::Document","Jekyll/Document.html#method-i-generate_excerpt","()",""],["generate_excerpt?","Jekyll::Document","Jekyll/Document.html#method-i-generate_excerpt-3F","()","<p>Whether to generate an excerpt\n<p>Returns true if the excerpt separator is configured.\n"],["generate_row","Jekyll::LiquidRenderer::Table","Jekyll/LiquidRenderer/Table.html#method-i-generate_row","(row_data, widths)",""],["generate_table","Jekyll::LiquidRenderer::Table","Jekyll/LiquidRenderer/Table.html#method-i-generate_table","(data, widths)",""],["generate_table_head_border","Jekyll::LiquidRenderer::Table","Jekyll/LiquidRenderer/Table.html#method-i-generate_table_head_border","(row_data, widths)",""],["generate_url","Jekyll::URL","Jekyll/URL.html#method-i-generate_url","(template)","<p>Internal: Generate the URL by replacing all placeholders with their\nrespective values in the given template …\n"],["generate_url_from_drop","Jekyll::URL","Jekyll/URL.html#method-i-generate_url_from_drop","(template)",""],["generate_url_from_hash","Jekyll::URL","Jekyll/URL.html#method-i-generate_url_from_hash","(template)",""],["generated_permalink","Jekyll::URL","Jekyll/URL.html#method-i-generated_permalink","()","<p>Generates a URL from the permalink\n<p>Returns the _unsanitized String URL\n"],["generated_url","Jekyll::URL","Jekyll/URL.html#method-i-generated_url","()","<p>Generates a URL from the template\n<p>Returns the unsanitized String URL\n"],["get_config_value_with_override","Jekyll::Configuration","Jekyll/Configuration.html#method-i-get_config_value_with_override","(config_key, override)",""],["get_entries","Jekyll::Reader","Jekyll/Reader.html#method-i-get_entries","(dir, subfolder)","<p>Read the entries from a particular directory for processing\n<p>dir - The String representing the relative …\n"],["get_processor","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-get_processor","()","<p>Rubocop does not allow reader methods to have names starting with `get_` To\nensure compatibility, this …\n"],["glob_include?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-glob_include-3F","(enum, e)","<p>– Check if an entry matches a specific pattern and return true,false.\nReturns true if path matches against …\n"],["global","Jekyll::Drops::JekyllDrop","Jekyll/Drops/JekyllDrop.html#method-c-global","()",""],["group_by","Jekyll::Filters","Jekyll/Filters.html#method-i-group_by","(input, property)","<p>Group an array of items by a property\n<p>input - the inputted Enumerable property - the property\n<p>Returns an …\n"],["groupable?","Jekyll::Filters","Jekyll/Filters.html#method-i-groupable-3F","(element)",""],["has?","Jekyll::Utils::Ansi","Jekyll/Utils/Ansi.html#method-i-has-3F","(str)",""],["has_precedence?","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-has_precedence-3F","(old_scope, new_scope)","<p>Determines if a new scope has precedence over an old one\n<p>old_scope - the old scope hash, or nil if there&#39;s …\n"],["has_yaml_header?","Jekyll::Utils","Jekyll/Utils.html#method-i-has_yaml_header-3F","(file)","<p>Determines whether a given file has\n<p>Returns true if the YAML front matter is present. rubocop: disable …\n"],["hash_for_json","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-hash_for_json","(state = nil)","<p>Generate a Hash for use in generating JSON. This is useful if fields need\nto be cleared before the JSON …\n"],["hash_for_json","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-hash_for_json","(*)","<p>Generate a Hash for use in generating JSON. This is useful if fields need\nto be cleared before the JSON …\n"],["healthy?","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-healthy-3F","(site)",""],["hidden_in_the_future?","Jekyll::Publisher","Jekyll/Publisher.html#method-i-hidden_in_the_future-3F","(thing)",""],["highlighter","Jekyll::Converters::Markdown::KramdownParser","Jekyll/Converters/Markdown/KramdownParser.html#method-i-highlighter","()","<p>config[syntax_higlighter] &gt;\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">config</span>[<span class=\"ruby-identifier\">kramdown</span>][<span class=\"ruby-identifier\">enable_coderay</span>] <span class=\"ruby-operator\">&gt;</span>\n<span class=\"ruby-identifier\">config</span>[<span class=\"ruby-identifier\">highlighter</span>]\n</pre>\n<p>Where `enable_coderay` …\n"],["highlighter_prefix","Jekyll::Converter","Jekyll/Converter.html#method-i-highlighter_prefix","()","<p>Get the highlighter prefix.\n<p>Returns the String prefix.\n"],["highlighter_prefix","Jekyll::Converter","Jekyll/Converter.html#method-c-highlighter_prefix","(highlighter_prefix = nil)","<p>Public: Get or set the highlighter prefix. When an argument is specified,\nthe prefix will be set. If …\n"],["highlighter_suffix","Jekyll::Converter","Jekyll/Converter.html#method-i-highlighter_suffix","()","<p>Get the highlighter suffix.\n<p>Returns the String suffix.\n"],["highlighter_suffix","Jekyll::Converter","Jekyll/Converter.html#method-c-highlighter_suffix","(highlighter_suffix = nil)","<p>Public: Get or set the highlighter suffix. When an argument is specified,\nthe suffix will be set. If …\n"],["hook_owner","Jekyll::Convertible","Jekyll/Convertible.html#method-i-hook_owner","()","<p>returns the owner symbol for hook triggering\n"],["hour","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-hour","()",""],["html?","Jekyll::Page","Jekyll/Page.html#method-i-html-3F","()","<p>Returns the Boolean of whether this Page is HTML or not.\n"],["html_pages","Jekyll::Drops::SiteDrop","Jekyll/Drops/SiteDrop.html#method-i-html_pages","()",""],["i_day","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-i_day","()",""],["i_month","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-i_month","()",""],["id","Jekyll::Document","Jekyll/Document.html#method-i-id","()",""],["id","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-id","()","<p>The UID for this doc (useful in feeds). e.g. /2008/11/05/my-awesome-doc\n<p>Returns the String UID.\n"],["in_dest_dir","Jekyll::Site","Jekyll/Site.html#method-i-in_dest_dir","(*paths)","<p>Public: Prefix a given path with the destination directory.\n<p>paths - (optional) path elements to a file …\n"],["in_source_dir","Jekyll::Site","Jekyll/Site.html#method-i-in_source_dir","(*paths)","<p>Public: Prefix a given path with the source directory.\n<p>paths - (optional) path elements to a file or directory …\n"],["in_theme_dir","Jekyll::Site","Jekyll/Site.html#method-i-in_theme_dir","(*paths)","<p>Public: Prefix a given path with the theme directory.\n<p>paths - (optional) path elements to a file or directory …\n"],["include?","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-include-3F","(something)","<p>Check if excerpt includes a string\n<p>Returns true if the string passed in\n"],["included?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-included-3F","(entry)",""],["includes_path","Jekyll::Theme","Jekyll/Theme.html#method-i-includes_path","()",""],["increment_bytes","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-increment_bytes","(filename, bytes)",""],["increment_time","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-increment_time","(filename, time)",""],["incremental?","Jekyll::Site","Jekyll/Site.html#method-i-incremental-3F","(override = {})","<p>Whether to perform a full rebuild without incremental regeneration\n<p>Returns a Boolean: true for a full …\n"],["index?","Jekyll::Page","Jekyll/Page.html#method-i-index-3F","()","<p>Returns the Boolean of whether this Page is an index file or not.\n"],["info","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-info","(topic, message = nil)","<p>Public: Print a message\n<p>topic - the topic of the message, e.g. “Configuration file”, “Deprecation”,\n…\n"],["inherited","Jekyll::Command","Jekyll/Command.html#method-c-inherited","(base)","<p>Keep a list of subclasses of Jekyll::Command every time it&#39;s inherited\nCalled automatically.\n<p>base …\n"],["inherited","Jekyll::Plugin","Jekyll/Plugin.html#method-c-inherited","(const)",""],["init_with_program","Jekyll::Commands::Build","Jekyll/Commands/Build.html#method-c-init_with_program","(prog)","<p>Create the Mercenary command for the Jekyll CLI for this Command\n"],["init_with_program","Jekyll::Commands::Clean","Jekyll/Commands/Clean.html#method-c-init_with_program","(prog)",""],["init_with_program","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-init_with_program","(prog)",""],["init_with_program","Jekyll::Commands::Help","Jekyll/Commands/Help.html#method-c-init_with_program","(prog)",""],["init_with_program","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-init_with_program","(prog)",""],["init_with_program","Jekyll::Commands::NewTheme","Jekyll/Commands/NewTheme.html#method-c-init_with_program","(prog)",""],["init_with_program","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-init_with_program","(prog)",""],["initialize_git_repo","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-initialize_git_repo","()",""],["initialized_post_name","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-initialized_post_name","()","<p>Internal: Gets the filename of the sample post to be created\n<p>Returns the filename of the sample post, …\n"],["insert_hook","Jekyll::Hooks","Jekyll/Hooks.html#method-c-insert_hook","(owner, event, priority, &block)",""],["inspect","Jekyll::Collection","Jekyll/Collection.html#method-i-inspect","()","<p>An inspect string.\n<p>Returns the inspect string\n"],["inspect","Jekyll::Document","Jekyll/Document.html#method-i-inspect","()","<p>The inspect string for this document. Includes the relative path and the\ncollection label.\n<p>Returns the …\n"],["inspect","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-inspect","()","<p>Inspect the drop&#39;s keys and values through a JSON representation of its\nkeys and values.\n<p>Returns a …\n"],["inspect","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-inspect","()","<p>Returns the shorthand String identifier of this doc.\n"],["inspect","Jekyll::Filters","Jekyll/Filters.html#method-i-inspect","(input)","<p>Convert an object into its String representation for debugging\n<p>input - The Object to be converted\n<p>Returns …\n"],["inspect","Jekyll::Page","Jekyll/Page.html#method-i-inspect","()","<p>Returns the object as a debug String.\n"],["instantiate_subclasses","Jekyll::Site","Jekyll/Site.html#method-i-instantiate_subclasses","(klass)","<p>klass - class or module containing the subclasses. Returns array of\ninstances of subclasses of parameter. …\n"],["invalid_command","Jekyll::Commands::Help","Jekyll/Commands/Help.html#method-c-invalid_command","(prog, cmd)",""],["invalid_layout?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-invalid_layout-3F","(layout)","<p>Checks if the layout specified in the document actually exists\n<p>layout - the layout to check\n<p>Returns true …\n"],["invalid_layout?","Jekyll::Renderer","Jekyll/Renderer.html#method-i-invalid_layout-3F","(layout)","<p>Checks if the layout specified in the document actually exists\n<p>layout - the layout to check\n<p>Returns true …\n"],["item_property","Jekyll::Filters","Jekyll/Filters.html#method-i-item_property","(item, property)",""],["jekyll","Jekyll::Drops::UnifiedPayloadDrop","Jekyll/Drops/UnifiedPayloadDrop.html#method-i-jekyll","()",""],["jekyll_version_with_minor","Jekyll::ThemeBuilder::ERBRenderer","Jekyll/ThemeBuilder/ERBRenderer.html#method-i-jekyll_version_with_minor","()",""],["jsonify","Jekyll::Filters","Jekyll/Filters.html#method-i-jsonify","(input)","<p>Convert the input into json string\n<p>input - The Array or Hash to be converted\n<p>Returns the converted json …\n"],["keep_dirs","Jekyll::Cleaner","Jekyll/Cleaner.html#method-i-keep_dirs","()","<p>Private: The list of directories that need to be kept because they are\nparent directories of files specified …\n"],["keep_file_regex","Jekyll::Cleaner","Jekyll/Cleaner.html#method-i-keep_file_regex","()","<p>Private: Creates a regular expression from the config&#39;s keep_files\narray\n<p>Examples\n\n<pre>[&#39;.git&#39;,&#39;.svn&#39;] with ...</pre>\n"],["key?","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-key-3F","(key)","<p>Check if key exists in Drop\n<p>key - the string key whose value to fetch\n<p>Returns true if the given key is …\n"],["keys","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-keys","()","<p>Generates a list of keys with user content as their values. This gathers up\nthe Drop methods and keys …\n"],["launch_browser","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-launch_browser","(server, opts)",""],["layout","Jekyll::Drops::ExcerptDrop","Jekyll/Drops/ExcerptDrop.html#method-i-layout","()",""],["layout_directory","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-layout_directory","()",""],["layout_directory_in_cwd","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-layout_directory_in_cwd","()",""],["layout_directory_inside_source","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-layout_directory_inside_source","()",""],["layout_entries","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-layout_entries","()",""],["layout_name","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-layout_name","(file)",""],["layouts_path","Jekyll::Theme","Jekyll/Theme.html#method-i-layouts_path","()",""],["limit_posts!","Jekyll::Site","Jekyll/Site.html#method-i-limit_posts-21","()","<p>Limits the current posts; removes the posts which exceed the limit_posts\n<p>Returns nothing\n"],["load_cached_partial","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-load_cached_partial","(path, context)",""],["locate_include_file","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-locate_include_file","(context, file, safe)",""],["log_level=","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-log_level-3D","(level)","<p>Public: Set the log level on the writer\n<p>level - (symbol) the log level\n<p>Returns nothing\n"],["logdevice","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-logdevice","(severity)",""],["logger","Jekyll","Jekyll.html#method-c-logger","()","<p>Public: Fetch the logger instance for this Jekyll process.\n<p>Returns the LogAdapter instance.\n"],["logger=","Jekyll","Jekyll.html#method-c-logger-3D","(writer)","<p>Public: Set the log writer.\n\n<pre>New log writer must respond to the same methods\nas Ruby&#39;s interal Logger.</pre>\n"],["lookup_variable","Jekyll::LiquidExtensions","Jekyll/LiquidExtensions.html#method-i-lookup_variable","(context, variable)","<p>Lookup a Liquid variable in the given context.\n<p>context  - the Liquid context in question. variable - the …\n"],["lsi_related_posts","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-lsi_related_posts","()",""],["make_accessible","Jekyll::Converters::Markdown::KramdownParser","Jekyll/Converters/Markdown/KramdownParser.html#method-i-make_accessible","(hash = @config)",""],["markdownify","Jekyll::Filters","Jekyll/Filters.html#method-i-markdownify","(input)","<p>Convert a Markdown string into HTML output.\n<p>input - The Markdown String to convert.\n<p>Returns the HTML formatted …\n"],["matches","Jekyll::Converters::Identity","Jekyll/Converters/Identity.html#method-i-matches","(_ext)",""],["matches","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-matches","(ext)",""],["matches","Jekyll::Converters::SmartyPants","Jekyll/Converters/SmartyPants.html#method-i-matches","(_)",""],["matching_sets","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-matching_sets","(path, type)","<p>Collects a list of sets that match the given path and type\n<p>Returns an array of hashes\n"],["measure_bytes","Jekyll::LiquidRenderer::File","Jekyll/LiquidRenderer/File.html#method-i-measure_bytes","()",""],["measure_time","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-measure_time","()",""],["mergable?","Jekyll::Utils","Jekyll/Utils.html#method-i-mergable-3F","(value)",""],["merge","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-merge","(other, &block)",""],["merge!","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-merge-21","(other)",""],["merge_data!","Jekyll::Document","Jekyll/Document.html#method-i-merge_data-21","(other, source: \"YAML front matter\")","<p>Merge some data in with this document&#39;s data.\n<p>Returns the merged data.\n"],["merge_default_proc","Jekyll::Utils","Jekyll/Utils.html#method-i-merge_default_proc","(target, overwrite)",""],["merge_values","Jekyll::Utils","Jekyll/Utils.html#method-i-merge_values","(target, overwrite)",""],["merged_file_read_opts","Jekyll::Utils","Jekyll/Utils.html#method-i-merged_file_read_opts","(site, opts)","<p>Returns merged option hash for File.read of self.site (if exists) and a\ngiven param\n"],["message","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-message","(topic, message)","<p>Internal: Build a topic method\n<p>topic - the topic of the message, e.g. “Configuration file”, …\n"],["metadata_file","Jekyll::Cleaner","Jekyll/Cleaner.html#method-i-metadata_file","()","<p>Private: The metadata file storing dependency tree and build history\n<p>Returns an Array with the metdata …\n"],["metadata_file","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-metadata_file","()","<p>Produce the absolute path of the metadata file\n<p>Returns the String path of the file.\n"],["method_missing","Jekyll::Collection","Jekyll/Collection.html#method-i-method_missing","(method, *args, &blck)","<p>Override of method_missing to check in @data for the key.\n"],["method_missing","Jekyll::Document","Jekyll/Document.html#method-i-method_missing","(method, *args, &blck)","<p>Override of method_missing to check in @data for the key.\n"],["mime_types","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-mime_types","()",""],["minute","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-minute","()",""],["mkdir_p","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-mkdir_p","(directories)",""],["modernize_coderay_config","Jekyll::Converters::Markdown::KramdownParser","Jekyll/Converters/Markdown/KramdownParser.html#method-i-modernize_coderay_config","()","<p>If our highlighter is CodeRay we go in to merge the CodeRay defaults with\nyour “coderay” key …\n"],["modified?","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-modified-3F","(path)","<p>Checks if a path&#39;s (or one of its dependencies) mtime has changed\n<p>Returns a boolean.\n"],["modified?","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-modified-3F","()","<p>Is source path modified?\n<p>Returns true if modified since last write.\n"],["modified_time","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-modified_time","()",""],["month","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-month","()",""],["most_recent_posts","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-most_recent_posts","()",""],["mtime","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-mtime","()","<p>Returns last modification time for this file.\n"],["mtimes","Jekyll::StaticFile","Jekyll/StaticFile.html#method-c-mtimes","()","<p>The cache of last modification times [path] -&gt; mtime.\n"],["mutable","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-c-mutable","(is_mutable = nil)","<p>Get or set whether the drop class is mutable. Mutability determines whether\nor not pre-defined fields …\n"],["mutable?","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-c-mutable-3F","()",""],["name","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-name","()",""],["new","Jekyll::Cleaner","Jekyll/Cleaner.html#method-c-new","(site)",""],["new","Jekyll::Collection","Jekyll/Collection.html#method-c-new","(site, label)","<p>Create a new Collection.\n<p>site - the site to which this collection belongs. label - the name of the\ncollection …\n"],["new","Jekyll::CollectionReader","Jekyll/CollectionReader.html#method-c-new","(site)",""],["new","Jekyll::Commands::Serve::Servlet","Jekyll/Commands/Serve/Servlet.html#method-c-new","(server, root, callbacks)",""],["new","Jekyll::Converter","Jekyll/Converter.html#method-c-new","(config = {})","<p>Initialize the converter.\n<p>Returns an initialized Converter.\n"],["new","Jekyll::Converters::Markdown::KramdownParser","Jekyll/Converters/Markdown/KramdownParser.html#method-c-new","(config)",""],["new","Jekyll::Converters::Markdown::RDiscountParser","Jekyll/Converters/Markdown/RDiscountParser.html#method-c-new","(config)",""],["new","Jekyll::Converters::Markdown::RedcarpetParser","Jekyll/Converters/Markdown/RedcarpetParser.html#method-c-new","(config)",""],["new","Jekyll::Converters::SmartyPants","Jekyll/Converters/SmartyPants.html#method-c-new","(config)",""],["new","Jekyll::DataReader","Jekyll/DataReader.html#method-c-new","(site)",""],["new","Jekyll::Document","Jekyll/Document.html#method-c-new","(path, relations = {})","<p>Create a new Document.\n<p>path - the path to the file relations - a hash with keys :site and\n:collection, …\n"],["new","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-c-new","(obj)","<p>Create a new Drop\n<p>obj - the Jekyll Site, Collection, or Document required by the drop.\n<p>Returns nothing …\n"],["new","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-c-new","(site, base_directory = nil)",""],["new","Jekyll::Excerpt","Jekyll/Excerpt.html#method-c-new","(doc)","<p>Initialize this Excerpt instance.\n<p>doc - The Document.\n<p>Returns the new Excerpt.\n"],["new","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-c-new","(site)","<p>Initializes a new instance.\n"],["new","Jekyll::Layout","Jekyll/Layout.html#method-c-new","(site, base, name)","<p>Initialize a new Layout.\n<p>site - The Site. base - The String path to the source. name - The String\nfilename …\n"],["new","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-c-new","(site)",""],["new","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-c-new","(site)",""],["new","Jekyll::LiquidRenderer::File","Jekyll/LiquidRenderer/File.html#method-c-new","(renderer, filename)",""],["new","Jekyll::LiquidRenderer::Table","Jekyll/LiquidRenderer/Table.html#method-c-new","(stats)",""],["new","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-c-new","(writer, level = :info)","<p>Public: Create a new instance of a log writer\n<p>writer - Logger compatible instance log_level - (optional, …\n"],["new","Jekyll::Page","Jekyll/Page.html#method-c-new","(site, base, dir, name)","<p>Initialize a new Page.\n<p>site - The Site object. base - The String path to the source. dir  - The\nString …\n"],["new","Jekyll::PageReader","Jekyll/PageReader.html#method-c-new","(site, dir)",""],["new","Jekyll::Plugin","Jekyll/Plugin.html#method-c-new","(config = {})","<p>Initialize a new plugin. This should be overridden by the subclass.\n<p>config - The Hash of configuration …\n"],["new","Jekyll::PluginManager","Jekyll/PluginManager.html#method-c-new","(site)","<p>Create an instance of this class.\n<p>site - the instance of Jekyll::Site we&#39;re concerned with\n<p>Returns …\n"],["new","Jekyll::PostReader","Jekyll/PostReader.html#method-c-new","(site)",""],["new","Jekyll::Publisher","Jekyll/Publisher.html#method-c-new","(site)",""],["new","Jekyll::Reader","Jekyll/Reader.html#method-c-new","(site)",""],["new","Jekyll::Regenerator","Jekyll/Regenerator.html#method-c-new","(site)",""],["new","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-c-new","(post)",""],["new","Jekyll::Renderer","Jekyll/Renderer.html#method-c-new","(site, document, site_payload = nil)",""],["new","Jekyll::Site","Jekyll/Site.html#method-c-new","(config)","<p>Public: Initialize a new Site.\n<p>config - A Hash containing site configuration details.\n"],["new","Jekyll::StaticFile","Jekyll/StaticFile.html#method-c-new","(site, base, dir, name, collection = nil)","<p>Initialize a new StaticFile.\n<p>site - The Site. base - The String path to the &lt;source&gt;. dir  - The …\n"],["new","Jekyll::StaticFileReader","Jekyll/StaticFileReader.html#method-c-new","(site, dir)",""],["new","Jekyll::Stevenson","Jekyll/Stevenson.html#method-c-new","()",""],["new","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::Tags::IncludeTagError","Jekyll/Tags/IncludeTagError.html#method-c-new","(msg, path)",""],["new","Jekyll::Tags::Link","Jekyll/Tags/Link.html#method-c-new","(tag_name, relative_path, tokens)",""],["new","Jekyll::Tags::PostComparer","Jekyll/Tags/PostComparer.html#method-c-new","(name)",""],["new","Jekyll::Tags::PostUrl","Jekyll/Tags/PostUrl.html#method-c-new","(tag_name, post, tokens)",""],["new","Jekyll::Theme","Jekyll/Theme.html#method-c-new","(name)",""],["new","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-c-new","(theme_name, opts)",""],["new","Jekyll::ThemeBuilder::ERBRenderer","Jekyll/ThemeBuilder/ERBRenderer.html#method-c-new","(theme_builder)",""],["new","Jekyll::URL","Jekyll/URL.html#method-c-new","(options)","<p>options - One of :permalink or :template must be supplied.\n\n<pre>:template     - The String used as template ...</pre>\n"],["new","Kramdown::Parser::SmartyPants","Kramdown/Parser/SmartyPants.html#method-c-new","(source, options)",""],["new_dirs","Jekyll::Cleaner","Jekyll/Cleaner.html#method-i-new_dirs","()","<p>Private: The list of directories to be created when site is built. These\nare the parent directories of …\n"],["new_files","Jekyll::Cleaner","Jekyll/Cleaner.html#method-i-new_files","()","<p>Private: The list of files to be created when site is built.\n<p>Returns a Set with the file paths\n"],["next","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-next","()",""],["next_doc","Jekyll::Document","Jekyll/Document.html#method-i-next_doc","()",""],["no_subcommand","Jekyll::Deprecator","Jekyll/Deprecator.html#method-i-no_subcommand","(args)",""],["normalize_whitespace","Jekyll::Filters","Jekyll/Filters.html#method-i-normalize_whitespace","(input)","<p>Replace any whitespace in the input string with a single space\n<p>input - The String on which to operate. …\n"],["number_of_words","Jekyll::Filters","Jekyll/Filters.html#method-i-number_of_words","(input)","<p>Count the number of words in the input string.\n<p>input - The String on which to operate.\n<p>Returns the Integer …\n"],["obsolete_files","Jekyll::Cleaner","Jekyll/Cleaner.html#method-i-obsolete_files","()","<p>Private: The list of files and directories to be deleted during cleanup\nprocess\n<p>Returns an Array of the …\n"],["output","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-output","()",""],["output_ext","Jekyll::Converters::Identity","Jekyll/Converters/Identity.html#method-i-output_ext","(ext)",""],["output_ext","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-output_ext","(_ext)",""],["output_ext","Jekyll::Converters::SmartyPants","Jekyll/Converters/SmartyPants.html#method-i-output_ext","(_)",""],["output_ext","Jekyll::Convertible","Jekyll/Convertible.html#method-i-output_ext","()","<p>Determine the extension depending on content_type.\n<p>Returns the String extension for the output file.\n\n<pre>e.g. ...</pre>\n"],["output_ext","Jekyll::Document","Jekyll/Document.html#method-i-output_ext","()","<p>The output extension of the document.\n<p>Returns the output extension\n"],["output_ext","Jekyll::Renderer","Jekyll/Renderer.html#method-i-output_ext","()","<p>Determine the extname the outputted file should have\n<p>Returns the output extname including the leading …\n"],["output_exts","Jekyll::Renderer","Jekyll/Renderer.html#method-i-output_exts","()",""],["outside_site_source?","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-outside_site_source-3F","(path, dir, safe)",""],["page_path","Jekyll::Tags::IncludeRelativeTag","Jekyll/Tags/IncludeRelativeTag.html#method-i-page_path","(context)",""],["parent_dirs","Jekyll::Cleaner","Jekyll/Cleaner.html#method-i-parent_dirs","(file)","<p>Private: The list of parent directories of a given file\n<p>Returns an Array with the directory paths\n"],["parse","Jekyll::LiquidRenderer::File","Jekyll/LiquidRenderer/File.html#method-i-parse","(content)",""],["parse_condition","Jekyll::Filters","Jekyll/Filters.html#method-i-parse_condition","(exp)","<p>Parse a string to a Liquid Condition\n"],["parse_date","Jekyll::Utils","Jekyll/Utils.html#method-i-parse_date","(input, msg = \"Input could not be parsed.\")","<p>Parse a date/time and throw an error if invalid\n<p>input - the date/time to parse msg - (optional) the error …\n"],["parse_options","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-i-parse_options","(input)",""],["parse_params","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-parse_params","(context)",""],["path","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-path","()","<p>&#39;Path&#39; of the excerpt.\n<p>Returns the path for the doc this excerpt belongs to with #excerpt appended\n…\n"],["path","Jekyll::Page","Jekyll/Page.html#method-i-path","()","<p>The path to the source file\n<p>Returns the path to the source file\n"],["path","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-path","()","<p>Returns source file path.\n"],["path_for","Jekyll::Theme","Jekyll/Theme.html#method-i-path_for","(folder)",""],["permalink","Jekyll::Document","Jekyll/Document.html#method-i-permalink","()","<p>The permalink for this Document. Permalink is set via the data Hash.\n<p>Returns the permalink or nil if no …\n"],["permalink","Jekyll::Page","Jekyll/Page.html#method-i-permalink","()","<p>The full path and filename of the post. Defined in the YAML of the post\nbody.\n<p>Returns the String permalink …\n"],["permalink_ext","Jekyll::Renderer","Jekyll/Renderer.html#method-i-permalink_ext","()",""],["place_in_layout?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-place_in_layout-3F","()","<p>Determine whether the file should be placed into layouts.\n<p>Returns false if the document is an asset file. …\n"],["place_in_layout?","Jekyll::Document","Jekyll/Document.html#method-i-place_in_layout-3F","()","<p>Determine whether the file should be placed into layouts.\n<p>Returns false if the document is either an asset …\n"],["place_in_layout?","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-place_in_layout-3F","()",""],["place_in_layouts","Jekyll::Renderer","Jekyll/Renderer.html#method-i-place_in_layouts","(content, payload, info)","<p>Render layouts and place given content inside.\n<p>content - the content to be placed in the layout\n<p>Returns …\n"],["placeholders","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-placeholders","()",""],["plugin_allowed?","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-plugin_allowed-3F","(gem_name)","<p>Check whether a gem plugin is allowed to be used during this build.\n<p>gem_name - the name of the gem\n<p>Returns …\n"],["plugins_path","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-plugins_path","()","<p>Public: Setup the plugin search path\n<p>Returns an Array of plugin search paths\n"],["pluralized_array_from_hash","Jekyll::Utils","Jekyll/Utils.html#method-i-pluralized_array_from_hash","(hash, singular_key, plural_key)","<p>Read array from the supplied hash favouring the singular key and then the\nplural key, and handling any …\n"],["pop","Jekyll::Filters","Jekyll/Filters.html#method-i-pop","(array, input = 1)",""],["populate_categories","Jekyll::Document","Jekyll/Document.html#method-i-populate_categories","()",""],["populate_tags","Jekyll::Document","Jekyll/Document.html#method-i-populate_tags","()",""],["post_attr_hash","Jekyll::Site","Jekyll/Site.html#method-i-post_attr_hash","(post_attr)","<p>Construct a Hash of Posts indexed by the specified Post attribute.\n<p>post_attr - The String name of the …\n"],["post_date","Jekyll::Tags::PostComparer","Jekyll/Tags/PostComparer.html#method-i-post_date","()",""],["post_read","Jekyll::Document","Jekyll/Document.html#method-i-post_read","()",""],["post_slug","Jekyll::Tags::PostComparer","Jekyll/Tags/PostComparer.html#method-i-post_slug","(other)","<p>Construct the directory-aware post slug for a Jekyll::Post\n<p>other - the Jekyll::Post\n<p>Returns the post slug …\n"],["posts","Jekyll::Drops::SiteDrop","Jekyll/Drops/SiteDrop.html#method-i-posts","()",""],["posts","Jekyll::Site","Jekyll/Site.html#method-i-posts","()",""],["preserve_source_location?","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-preserve_source_location-3F","(path, options)",""],["previous","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-previous","()",""],["previous_doc","Jekyll::Document","Jekyll/Document.html#method-i-previous_doc","()",""],["print_stats","Jekyll::Site","Jekyll/Site.html#method-i-print_stats","()",""],["priority","Jekyll::Plugin","Jekyll/Plugin.html#method-c-priority","(priority = nil)","<p>Get or set the priority of this plugin. When called without an argument it\nreturns the priority. When …\n"],["priority_value","Jekyll::Hooks","Jekyll/Hooks.html#method-c-priority_value","(priority)","<p>Ensure the priority is a Fixnum\n"],["process","Jekyll::Commands::Build","Jekyll/Commands/Build.html#method-c-process","(options)","<p>Build your jekyll site Continuously watch if `watch` is set to true in the\nconfig.\n"],["process","Jekyll::Commands::Clean","Jekyll/Commands/Clean.html#method-c-process","(options)",""],["process","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-process","(options)",""],["process","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-process","(args, options = {})",""],["process","Jekyll::Commands::NewTheme","Jekyll/Commands/NewTheme.html#method-c-process","(args, opts)",""],["process","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-process","(opts)",""],["process","Jekyll::Deprecator","Jekyll/Deprecator.html#method-i-process","(args)",""],["process","Jekyll::Layout","Jekyll/Layout.html#method-i-process","(name)","<p>Extract information from the layout filename.\n<p>name - The String filename of the layout file.\n<p>Returns nothing. …\n"],["process","Jekyll::Page","Jekyll/Page.html#method-i-process","(name)","<p>Extract information from the page filename.\n<p>name - The String filename of the page file.\n<p>Returns nothing. …\n"],["process","Jekyll::Site","Jekyll/Site.html#method-i-process","()","<p>Public: Read, process, and write this Site to output.\n<p>Returns nothing.\n"],["process_site","Jekyll::Command","Jekyll/Command.html#method-c-process_site","(site)","<p>Run Site#process and catch errors\n<p>site - the Jekyll::Site object\n<p>Returns nothing\n"],["publish?","Jekyll::Publisher","Jekyll/Publisher.html#method-i-publish-3F","(thing)",""],["published?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-published-3F","()","<p>Whether the file is published or not, as indicated in YAML front-matter\n"],["published?","Jekyll::Document","Jekyll/Document.html#method-i-published-3F","()","<p>Whether the file is published or not, as indicated in YAML front-matter\n<p>Returns &#39;false&#39; if the …\n"],["publisher","Jekyll::Site","Jekyll/Site.html#method-i-publisher","()","<p>Returns the publisher or creates a new publisher if it doesn&#39;t already\nexist.\n<p>Returns The Publisher …\n"],["push","Jekyll::Filters","Jekyll/Filters.html#method-i-push","(array, input)",""],["quiet","Jekyll::Configuration","Jekyll/Configuration.html#method-i-quiet","(override = {})",""],["quiet?","Jekyll::Configuration","Jekyll/Configuration.html#method-i-quiet-3F","(override = {})",""],["read","Jekyll::Collection","Jekyll/Collection.html#method-i-read","()","<p>Read the allowed documents into the collection&#39;s array of docs.\n<p>Returns the sorted array of docs. …\n"],["read","Jekyll::CollectionReader","Jekyll/CollectionReader.html#method-i-read","()","<p>Read in all collections specified in the configuration\n<p>Returns nothing.\n"],["read","Jekyll::DataReader","Jekyll/DataReader.html#method-i-read","(dir)","<p>Read all the files in &lt;source&gt;/&lt;dir&gt;/_drafts and create a new\nDraft object with each one. …\n"],["read","Jekyll::Document","Jekyll/Document.html#method-i-read","(opts = {})","<p>Read in the file and assign the content and data based on the file\ncontents. Merge the frontmatter of …\n"],["read","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-read","()",""],["read","Jekyll::PageReader","Jekyll/PageReader.html#method-i-read","(files)","<p>Read all the files in &lt;source&gt;/&lt;dir&gt;/ for Yaml header and\ncreate a new Page object for each …\n"],["read","Jekyll::Reader","Jekyll/Reader.html#method-i-read","()","<p>Read Site data from disk and load it into internal data structures.\n<p>Returns nothing.\n"],["read","Jekyll::Site","Jekyll/Site.html#method-i-read","()","<p>Read Site data from disk and load it into internal data structures.\n<p>Returns nothing.\n"],["read","Jekyll::StaticFileReader","Jekyll/StaticFileReader.html#method-i-read","(files)","<p>Read all the files in &lt;source&gt;/&lt;dir&gt;/ for Yaml header and\ncreate a new Page object for each …\n"],["read_config_file","Jekyll::Configuration","Jekyll/Configuration.html#method-i-read_config_file","(file)","<p>Public: Read configuration and return merged Hash\n<p>file - the path to the YAML file to be read in\n<p>Returns …\n"],["read_config_files","Jekyll::Configuration","Jekyll/Configuration.html#method-i-read_config_files","(files)","<p>Public: Read in a list of configuration files and merge with this hash\n<p>files - the list of configuration …\n"],["read_content","Jekyll::PostReader","Jekyll/PostReader.html#method-i-read_content","(dir, magic_dir, matcher)","<p>Read all the content files from &lt;source&gt;/&lt;dir&gt;/magic_dir\n\n<pre>and return them with the type klass.</pre>\n"],["read_data_file","Jekyll::DataReader","Jekyll/DataReader.html#method-i-read_data_file","(path)","<p>Determines how to read a data file.\n<p>Returns the contents of the data file.\n"],["read_data_to","Jekyll::DataReader","Jekyll/DataReader.html#method-i-read_data_to","(dir, data)","<p>Read and parse all yaml files under &lt;dir&gt; and add them to the\n&lt;data&gt; variable.\n<p>dir - The string …\n"],["read_directories","Jekyll::Reader","Jekyll/Reader.html#method-i-read_directories","(dir = \"\")","<p>Recursively traverse directories to find pages and static files that will\nbecome part of the site according …\n"],["read_document","Jekyll::Collection","Jekyll/Collection.html#method-i-read_document","(full_path)",""],["read_drafts","Jekyll::PostReader","Jekyll/PostReader.html#method-i-read_drafts","(dir)","<p>Read all the files in &lt;source&gt;/&lt;dir&gt;/_drafts and create a new\nDocument object with each one. …\n"],["read_file","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-read_file","(file, context)","<p>This method allows to modify the file content by inheriting from the class.\n"],["read_metadata","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-read_metadata","()","<p>Read metadata from the metadata file, if no file is found, initialize with\nan empty hash\n<p>Returns the read …\n"],["read_posts","Jekyll::PostReader","Jekyll/PostReader.html#method-i-read_posts","(dir)","<p>Read all the files in &lt;source&gt;/&lt;dir&gt;/_posts and create a new\nDocument object with each one. …\n"],["read_publishable","Jekyll::PostReader","Jekyll/PostReader.html#method-i-read_publishable","(dir, magic_dir, matcher)","<p>Read all the files in &lt;source&gt;/&lt;dir&gt;/&lt;magic_dir&gt; and\ncreate a new Document object with …\n"],["read_static_file","Jekyll::Collection","Jekyll/Collection.html#method-i-read_static_file","(file_path, full_path)",""],["read_yaml","Jekyll::Convertible","Jekyll/Convertible.html#method-i-read_yaml","(base, name, opts = {})","<p>Read the YAML frontmatter.\n<p>base - The String path to the dir containing the file. name - The String\nfilename …\n"],["realpath_for","Jekyll::Theme","Jekyll/Theme.html#method-i-realpath_for","(folder)",""],["realpath_prefixed_with?","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-realpath_prefixed_with-3F","(path, dir)",""],["regenerate?","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-regenerate-3F","(document)","<p>Checks if a renderable object needs to be regenerated\n<p>Returns a boolean.\n"],["regenerate_document?","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-regenerate_document-3F","(document)",""],["regenerate_page?","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-regenerate_page-3F","(document)",""],["register","Jekyll::Hooks","Jekyll/Hooks.html#method-c-register","(owners, event, priority: DEFAULT_PRIORITY, &block)","<p>register hook(s) to be called later, public API\n"],["register_one","Jekyll::Hooks","Jekyll/Hooks.html#method-c-register_one","(owner, event, priority, &block)","<p>register a single hook to be called later, internal API\n"],["related_posts","Jekyll::Document","Jekyll/Document.html#method-i-related_posts","()","<p>Calculate related posts.\n<p>Returns an Array of related Posts.\n"],["relative_directory","Jekyll::Collection","Jekyll/Collection.html#method-i-relative_directory","()","<p>The directory for this Collection, relative to the site source.\n<p>Returns a String containing the directory …\n"],["relative_path","Jekyll::Document","Jekyll/Document.html#method-i-relative_path","()","<p>The path to the document, relative to the site source.\n<p>Returns a String path which represents the relative …\n"],["relative_path","Jekyll::Page","Jekyll/Page.html#method-i-relative_path","()","<p>The path to the page source file, relative to the site source\n"],["relative_permalinks_are_deprecated","Jekyll::Site","Jekyll/Site.html#method-i-relative_permalinks_are_deprecated","()","<p>Warns the user if permanent links are relative to the parent directory. As\nthis is a deprecated function …\n"],["relative_to_source","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-relative_to_source","(entry)",""],["remove","Jekyll::Commands::Clean","Jekyll/Commands/Clean.html#method-c-remove","(filename, checker_func: :file?)",""],["renamed_key","Jekyll::Configuration","Jekyll/Configuration.html#method-i-renamed_key","(old, new, config, _ = nil)",""],["render","Jekyll::LiquidRenderer::File","Jekyll/LiquidRenderer/File.html#method-i-render","(*args)",""],["render","Jekyll::Page","Jekyll/Page.html#method-i-render","(layouts, site_payload)","<p>Add any necessary layouts to this post\n<p>layouts      - The Hash of {“name” =&gt; “layout”}. …\n"],["render","Jekyll::Site","Jekyll/Site.html#method-i-render","()","<p>Render the site to the destination.\n<p>Returns nothing.\n"],["render","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-i-render","(context)",""],["render","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-render","(context)",""],["render","Jekyll::Tags::Link","Jekyll/Tags/Link.html#method-i-render","(context)",""],["render","Jekyll::Tags::PostUrl","Jekyll/Tags/PostUrl.html#method-i-render","(context)",""],["render","Jekyll::ThemeBuilder::ERBRenderer","Jekyll/ThemeBuilder/ERBRenderer.html#method-i-render","(contents)",""],["render!","Jekyll::LiquidRenderer::File","Jekyll/LiquidRenderer/File.html#method-i-render-21","(*args)",""],["render_all_layouts","Jekyll::Convertible","Jekyll/Convertible.html#method-i-render_all_layouts","(layouts, payload, info)","<p>Recursively render layouts\n<p>layouts - a list of the layouts payload - the payload for Liquid info    -\n…\n"],["render_codehighlighter","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-i-render_codehighlighter","(code)",""],["render_docs","Jekyll::Site","Jekyll/Site.html#method-i-render_docs","(payload)",""],["render_liquid","Jekyll::Convertible","Jekyll/Convertible.html#method-i-render_liquid","(content, payload, info, path)","<p>Render Liquid in the content\n<p>content - the raw Liquid content to render payload - the payload for Liquid\n…\n"],["render_liquid","Jekyll::Renderer","Jekyll/Renderer.html#method-i-render_liquid","(content, payload, info, path = nil)","<p>Render the given content with the payload and info\n<p>content - payload - info    - path    - (optional) …\n"],["render_pages","Jekyll::Site","Jekyll/Site.html#method-i-render_pages","(payload)",""],["render_pygments","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-i-render_pygments","(code, is_safe)",""],["render_rouge","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-i-render_rouge","(code)",""],["render_variable","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-render_variable","(context)","<p>Render the variable if required\n"],["render_with_liquid?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-render_with_liquid-3F","()","<p>Determine whether the file should be rendered with Liquid.\n<p>Always returns true.\n"],["render_with_liquid?","Jekyll::Document","Jekyll/Document.html#method-i-render_with_liquid-3F","()","<p>Determine whether the file should be rendered with Liquid.\n<p>Returns false if the document is either an …\n"],["replace_generated_toc","Jekyll::Converters::Markdown::RDiscountParser","Jekyll/Converters/Markdown/RDiscountParser.html#method-i-replace_generated_toc","(rd, html, toc_token)",""],["replaced_files","Jekyll::Cleaner","Jekyll/Cleaner.html#method-i-replaced_files","()","<p>Private: The list of existing files that will be replaced by a directory\nduring build\n<p>Returns a Set with …\n"],["require_all","Object","Object.html#method-i-require_all","(path)","<p>Require all of the Ruby files in the given directory.\n<p>path - The String relative path from here to the …\n"],["require_from_bundler","Jekyll::PluginManager","Jekyll/PluginManager.html#method-c-require_from_bundler","()",""],["require_gems","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-require_gems","()","<p>Require each of the gem plugins specified.\n<p>Returns nothing.\n"],["require_if_present","Jekyll::External","Jekyll/External.html#method-c-require_if_present","(names)","<p>Require a gem or file if it&#39;s present, otherwise silently fail.\n<p>names - a string gem name or array …\n"],["require_plugin_files","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-require_plugin_files","()","<p>Require all .rb files if safe mode is off\n<p>Returns nothing.\n"],["require_with_graceful_fail","Jekyll::External","Jekyll/External.html#method-c-require_with_graceful_fail","(names)","<p>Require a gem or gems. If it&#39;s not present, show a very nice error\nmessage that explains everything …\n"],["reset","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-reset","()",""],["reset","Jekyll::Site","Jekyll/Site.html#method-i-reset","()","<p>Reset Site details.\n<p>Returns nothing\n"],["reset","Jekyll::Utils::Ansi","Jekyll/Utils/Ansi.html#method-i-reset","(str = \"\")","<p>Reset the color back to the default color so that you do not leak any\ncolors when you move onto the next …\n"],["reset_cache","Jekyll::StaticFile","Jekyll/StaticFile.html#method-c-reset_cache","()",""],["respond_to?","Jekyll::Document","Jekyll/Document.html#method-i-respond_to-3F","(method, include_private = false)","<p>Override of normal respond_to? to match method_missing&#39;s logic for\nlooking in @data.\n"],["respond_to_missing?","Jekyll::Collection","Jekyll/Collection.html#method-i-respond_to_missing-3F","(method, include_private = false)","<p>Override of normal respond_to? to match method_missing&#39;s logic for\nlooking in @data.\n"],["retrieve_dirs","Jekyll::Reader","Jekyll/Reader.html#method-i-retrieve_dirs","(_base, dir, dot_dirs)","<p>Recursively traverse directories with the read_directories function.\n<p>base - The String representing the …\n"],["retrieve_pages","Jekyll::Reader","Jekyll/Reader.html#method-i-retrieve_pages","(dir, dot_pages)","<p>Retrieve all the pages from the current directory, add them to the site and\nsort them.\n<p>dir - The String …\n"],["retrieve_posts","Jekyll::Reader","Jekyll/Reader.html#method-i-retrieve_posts","(dir)","<p>Retrieves all the posts(posts/drafts) from the given directory and add them\nto the site and sort them. …\n"],["retrieve_static_files","Jekyll::Reader","Jekyll/Reader.html#method-i-retrieve_static_files","(dir, dot_static_files)","<p>Retrieve all the static files from the current directory, add them to the\nsite and sort them.\n<p>dir - The …\n"],["root","Jekyll::Theme","Jekyll/Theme.html#method-i-root","()",""],["root","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-root","()",""],["rouge_formatter","Jekyll::Converters::Markdown::RedcarpetParser::WithRouge","Jekyll/Converters/Markdown/RedcarpetParser/WithRouge.html#method-i-rouge_formatter","(_lexer)",""],["run","Jekyll::Renderer","Jekyll/Renderer.html#method-i-run","()","<p>DAT RENDER THO\n"],["safe","Jekyll::Plugin","Jekyll/Plugin.html#method-c-safe","(safe = nil)","<p>Get or set the safety of this plugin. When called without an argument it\nreturns the safety. When an …\n"],["safe_glob","Jekyll::Utils","Jekyll/Utils.html#method-i-safe_glob","(dir, patterns, flags = 0)","<p>Work the same way as Dir.glob but seperating the input into two parts\n(&#39;dir&#39; + &#39;/&#39; + …\n"],["safe_load_file","Jekyll::Configuration","Jekyll/Configuration.html#method-i-safe_load_file","(filename)",""],["sample","Jekyll::Filters","Jekyll/Filters.html#method-i-sample","(input, num = 1)",""],["sanitize_filename","Jekyll::DataReader","Jekyll/DataReader.html#method-i-sanitize_filename","(name)",""],["sanitize_label","Jekyll::Collection","Jekyll/Collection.html#method-i-sanitize_label","(label)","<p>Produce a sanitized label name Label names may not contain anything but\nalphanumeric characters,\n\n<pre>underscores, ...</pre>\n"],["sanitize_path","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-sanitize_path","(path)","<p>Sanitizes the given path by removing a leading and adding a trailing slash\n"],["sanitize_url","Jekyll::URL","Jekyll/URL.html#method-i-sanitize_url","(str)","<p>Returns a sanitized String URL, stripping “../../” and multiples of “/”, as\nwell …\n"],["sanitized_opts","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-i-sanitized_opts","(opts, is_safe)",""],["sanitized_path","Jekyll","Jekyll.html#method-c-sanitized_path","(base_directory, questionable_path)","<p>Public: Ensures the questionable path is prefixed with the base directory\n\n<pre>and prepends the questionable ...</pre>\n"],["sass_file?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-sass_file-3F","()","<p>Determine whether the document is a Sass file.\n<p>Returns true if extname == .sass or .scss, false otherwise. …\n"],["sass_file?","Jekyll::Document","Jekyll/Document.html#method-i-sass_file-3F","()","<p>Determine whether the document is a Sass file.\n<p>Returns true if extname == .sass or .scss, false otherwise. …\n"],["sass_path","Jekyll::Theme","Jekyll/Theme.html#method-i-sass_path","()",""],["sassify","Jekyll::Filters","Jekyll/Filters.html#method-i-sassify","(input)","<p>Convert a Sass string into CSS output.\n<p>input - The Sass String to convert.\n<p>Returns the CSS formatted String …\n"],["scaffold_path","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-scaffold_path","()",""],["scaffold_post_content","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-scaffold_post_content","()",""],["scssify","Jekyll::Filters","Jekyll/Filters.html#method-i-scssify","(input)","<p>Convert a Scss string into CSS output.\n<p>input - The Scss String to convert.\n<p>Returns the CSS formatted String …\n"],["search_file","Jekyll::Commands::Serve::Servlet","Jekyll/Commands/Serve/Servlet.html#method-i-search_file","(req, res, basename)","<p>Add the ability to tap file.html the same way that Nginx does on our Docker\nimages (or on GitHub Pages …\n"],["second","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-second","()",""],["server_address","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-server_address","(server, opts)",""],["set_defaults","Jekyll::Commands::Serve::Servlet","Jekyll/Commands/Serve/Servlet.html#method-i-set_defaults","()",""],["set_timezone","Jekyll","Jekyll.html#method-c-set_timezone","(timezone)","<p>Public: Set the TZ environment variable to use the timezone specified\n<p>timezone - the IANA Time Zone\n<p>Returns …\n"],["setup","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-setup","(destination)","<p>Do a base pre-setup of WEBRick so that everything is in place when we get\nready to party, checking for …\n"],["setup","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-setup","()",""],["setup","Jekyll::Converters::Markdown::KramdownParser","Jekyll/Converters/Markdown/KramdownParser.html#method-i-setup","()","<p>Setup and normalize the configuration:\n\n<pre>* Create Kramdown if it doesn&#39;t exist.\n* Set syntax_highlighter, ...</pre>\n"],["setup","Jekyll::Site","Jekyll/Site.html#method-i-setup","()","<p>Load necessary libraries, plugins, converters, and generators.\n<p>Returns nothing.\n"],["shift","Jekyll::Filters","Jekyll/Filters.html#method-i-shift","(array, input = 1)",""],["short_month","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-short_month","()",""],["short_year","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-short_year","()",""],["site","Jekyll::Drops::UnifiedPayloadDrop","Jekyll/Drops/UnifiedPayloadDrop.html#method-i-site","()",""],["site_cleaner","Jekyll::Site","Jekyll/Site.html#method-i-site_cleaner","()","<p>Returns the Cleaner or creates a new Cleaner if it doesn&#39;t already\nexist.\n<p>Returns The Cleaner\n"],["site_data","Jekyll::Site","Jekyll/Site.html#method-i-site_data","()","<p>Prepare site data for site payload. The method maintains backward\ncompatibility if the key &#39;data&#39; …\n"],["site_payload","Jekyll::Site","Jekyll/Site.html#method-i-site_payload","()","<p>The Hash payload containing site-wide data.\n<p>Returns the Hash: { “site” =&gt; data } where data …\n"],["site_template","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-site_template","()",""],["sites","Jekyll","Jekyll.html#method-c-sites","()","<p>Public: An array of sites\n<p>Returns the Jekyll sites created.\n"],["slug","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-slug","()",""],["slugify","Jekyll::Filters","Jekyll/Filters.html#method-i-slugify","(input, mode = nil)","<p>Slugify a filename or title.\n<p>input - The filename or title to slugify. mode - how string is slugified …\n"],["slugify","Jekyll::Utils","Jekyll/Utils.html#method-i-slugify","(string, mode: nil, cased: false)","<p>Slugify a filename or title.\n<p>string - the filename or title to slugify mode - how string is slugified …\n"],["smartify","Jekyll::Filters","Jekyll/Filters.html#method-i-smartify","(input)","<p>Convert quotes into smart quotes.\n<p>input - The String to convert.\n<p>Returns the smart-quotified String.\n"],["sort","Jekyll::Filters","Jekyll/Filters.html#method-i-sort","(input, property = nil, nils = \"first\")","<p>Sort an array of objects\n<p>input - the object array property - property within each object to filter\nby …\n"],["sort_files!","Jekyll::Reader","Jekyll/Reader.html#method-i-sort_files-21","()","<p>Sorts posts, pages, and static files.\n"],["sort_input","Jekyll::Filters","Jekyll/Filters.html#method-i-sort_input","(input, property, order)",""],["source","Jekyll::Configuration","Jekyll/Configuration.html#method-i-source","(override)","<p>Public: Directory of the Jekyll source folder\n<p>override - the command-line options hash\n<p>Returns the path …\n"],["source_file_mtime","Jekyll::Document","Jekyll/Document.html#method-i-source_file_mtime","()",""],["source_modified_or_dest_missing?","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-source_modified_or_dest_missing-3F","(source_path, dest_path)","<p>Checks if the source has been modified or the destination is missing\n<p>returns a boolean\n"],["special?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-special-3F","(entry)",""],["start_callback","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-start_callback","(detached)",""],["stats_table","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-stats_table","(n = 50)",""],["stringify_hash_keys","Jekyll::Utils","Jekyll/Utils.html#method-i-stringify_hash_keys","(hash)","<p>Apply #to_s to all keys in the Hash\n<p>hash - the hash to which to apply this transformation\n<p>Returns a new …\n"],["stringify_keys","Jekyll::Configuration","Jekyll/Configuration.html#method-i-stringify_keys","()","<p>Public: Turn all keys into string\n<p>Return a copy of the hash where all its keys are strings\n"],["strip","Jekyll::Utils::Ansi","Jekyll/Utils/Ansi.html#method-i-strip","(str)","<p>Strip ANSI from the current string.  It also strips cursor stuff, well some\nof it, and it also strips …\n"],["strip_coderay_prefix","Jekyll::Converters::Markdown::KramdownParser","Jekyll/Converters/Markdown/KramdownParser.html#method-i-strip_coderay_prefix","(hash)",""],["strip_heredoc","Jekyll::Utils","Jekyll/Utils.html#method-i-strip_heredoc","(str)","<p>Takes an indented string and removes the preceding spaces on each line\n"],["style_to_permalink","Jekyll::Configuration","Jekyll/Configuration.html#method-i-style_to_permalink","(permalink_style)",""],["subclasses","Jekyll::Command","Jekyll/Command.html#method-c-subclasses","()","<p>A list of subclasses of Jekyll::Command\n"],["symbolize_hash_keys","Jekyll::Utils","Jekyll/Utils.html#method-i-symbolize_hash_keys","(hash)","<p>Apply #to_sym to all keys in the hash\n<p>hash - the hash to which to apply this transformation\n<p>Returns a new …\n"],["symlink?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-symlink-3F","(entry)","<p>– Check if a file is a symlink. NOTE: This can be converted to allowing\neven in safe,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">since</span> <span class=\"ruby-identifier\">we</span> <span class=\"ruby-identifier\">use</span> <span class=\"ruby-constant\">Pathutil</span><span class=\"ruby-comment\">#in_path? ...</span>\n</pre>\n"],["symlink_outside_site_source?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-symlink_outside_site_source-3F","(entry)","<p>– NOTE: Pathutil#in_path? gets the realpath. @param [&lt;Anything&gt;]\nentry the entry you want to validate. …\n"],["syntax_example","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-syntax_example","()",""],["table_widths","Jekyll::LiquidRenderer::Table","Jekyll/LiquidRenderer/Table.html#method-i-table_widths","(data)",""],["tag_includes_dirs","Jekyll::Tags::IncludeRelativeTag","Jekyll/Tags/IncludeRelativeTag.html#method-i-tag_includes_dirs","(context)",""],["tag_includes_dirs","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-tag_includes_dirs","(context)",""],["tag_name","Jekyll::Tags::Link","Jekyll/Tags/Link.html#method-c-tag_name","()",""],["tags","Jekyll::Site","Jekyll/Site.html#method-i-tags","()",""],["template","Jekyll::Page","Jekyll/Page.html#method-i-template","()","<p>The template of the permalink.\n<p>Returns the template String.\n"],["template","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-template","(filename)",""],["template_file","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-template_file","(filename)",""],["theme_directories","Jekyll::ThemeBuilder::ERBRenderer","Jekyll/ThemeBuilder/ERBRenderer.html#method-i-theme_directories","()",""],["theme_layout_directory","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-theme_layout_directory","()",""],["theme_layout_entries","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-theme_layout_entries","()",""],["third_party_processors","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-third_party_processors","()","<p>Public: A list of processors that you provide via plugins. This is really\nonly available if you are not …\n"],["time","Jekyll::Filters","Jekyll/Filters.html#method-i-time","(input)",""],["title","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-title","()",""],["titleize_slug","Jekyll::Utils","Jekyll/Utils.html#method-i-titleize_slug","(slug)","<p>Takes a slug and turns it into a simple title.\n"],["to_h","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-to_h","()","<p>Generate a Hash representation of the Drop by resolving each key&#39;s\nvalue. It includes Drop methods, …\n"],["to_h","Jekyll::Drops::JekyllDrop","Jekyll/Drops/JekyllDrop.html#method-i-to_h","()",""],["to_hash","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-to_hash","()",""],["to_integer","Jekyll::Filters","Jekyll/Filters.html#method-i-to_integer","(input)","<p>Convert the input into integer\n<p>input - the object string\n<p>Returns the integer value\n"],["to_json","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-to_json","(state = nil)","<p>Generate a JSON representation of the Drop.\n<p>state - the JSON::State object which determines the state …\n"],["to_json","Jekyll::Drops::JekyllDrop","Jekyll/Drops/JekyllDrop.html#method-i-to_json","(state = nil)",""],["to_liquid","Jekyll::Collection","Jekyll/Collection.html#method-i-to_liquid","()","<p>Produce a representation of this Collection for use in Liquid. Exposes two\nattributes:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-</span> <span class=\"ruby-identifier\">label</span>\n<span class=\"ruby-operator\">-</span> <span class=\"ruby-identifier\">docs</span>\n</pre>\n"],["to_liquid","Jekyll::Convertible","Jekyll/Convertible.html#method-i-to_liquid","(attrs = nil)","<p>Convert this Convertible&#39;s data to a Hash suitable for use by Liquid.\n<p>Returns the Hash representation …\n"],["to_liquid","Jekyll::Document","Jekyll/Document.html#method-i-to_liquid","()","<p>Create a Liquid-understandable version of this Document.\n<p>Returns a Hash representing this Document&#39;s …\n"],["to_liquid","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-to_liquid","()",""],["to_liquid","Jekyll::Site","Jekyll/Site.html#method-i-to_liquid","()",""],["to_liquid","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-to_liquid","()",""],["to_s","Jekyll::Convertible","Jekyll/Convertible.html#method-i-to_s","()","<p>Returns the contents as a String.\n"],["to_s","Jekyll::Document","Jekyll/Document.html#method-i-to_s","()","<p>The string representation for this document.\n<p>Returns the content of the document\n"],["to_s","Jekyll::Drops::CollectionDrop","Jekyll/Drops/CollectionDrop.html#method-i-to_s","()",""],["to_s","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-to_s","()",""],["to_s","Jekyll::LiquidRenderer::Table","Jekyll/LiquidRenderer/Table.html#method-i-to_s","(n = 50)",""],["to_s","Jekyll::URL","Jekyll/URL.html#method-i-to_s","()","<p>The generated relative URL of the resource\n<p>Returns the String URL Raises a Jekyll::Errors::InvalidURLError …\n"],["transform","Jekyll::Convertible","Jekyll/Convertible.html#method-i-transform","()","<p>Transform the contents based on the content type.\n<p>Returns the transformed contents.\n"],["transform_keys","Jekyll::Utils","Jekyll/Utils.html#method-i-transform_keys","(hash)",""],["trigger","Jekyll::Hooks","Jekyll/Hooks.html#method-c-trigger","(owner, event, *args)","<p>interface for Jekyll core components to trigger hooks\n"],["trigger_hooks","Jekyll::Document","Jekyll/Document.html#method-i-trigger_hooks","(hook_name, *args)",""],["trigger_hooks","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-trigger_hooks","(*)",""],["trigger_hooks","Jekyll::Page","Jekyll/Page.html#method-i-trigger_hooks","(hook_name, *args)",""],["type","Jekyll::Convertible","Jekyll/Convertible.html#method-i-type","()","<p>The type of a document,\n\n<pre>i.e., its classname downcase&#39;d and to_sym&#39;d.</pre>\n<p>Returns the type of self.\n"],["type","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-type","()","<p>Returns the type of the collection if present, nil otherwise.\n"],["unescape_path","Jekyll::URL","Jekyll/URL.html#method-c-unescape_path","(path)","<p>Unescapes a URL path segment\n<p>path - The path to be unescaped.\n<p>Examples:\n"],["unshift","Jekyll::Filters","Jekyll/Filters.html#method-i-unshift","(array, input)",""],["update_deprecated_types","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-update_deprecated_types","(set)",""],["uri_escape","Jekyll::Filters","Jekyll/Filters.html#method-i-uri_escape","(input)","<p>URI escape a string.\n<p>input - The String to escape.\n<p>Examples\n"],["url","Jekyll::Document","Jekyll/Document.html#method-i-url","()","<p>The computed URL for the document. See `Jekyll::URL#to_s` for more details.\n<p>Returns the computed URL for …\n"],["url","Jekyll::Page","Jekyll/Page.html#method-i-url","()","<p>The generated relative url of this page. e.g. /about.html.\n<p>Returns the String url.\n"],["url","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-url","()","<p>Applies a similar URL-building technique as Jekyll::Document that takes the\ncollection&#39;s URL template …\n"],["url_placeholders","Jekyll::Document","Jekyll/Document.html#method-i-url_placeholders","()","<p>Construct a Hash of key-value pairs which contain a mapping between\n\n<pre>a key in the URL template and the ...</pre>\n"],["url_placeholders","Jekyll::Page","Jekyll/Page.html#method-i-url_placeholders","()","<p>Returns a hash of URL placeholder names (as symbols) mapping to the desired\nplaceholder replacements. …\n"],["url_template","Jekyll::Collection","Jekyll/Collection.html#method-i-url_template","()","<p>The URL template to render collection&#39;s documents at.\n<p>Returns the URL template to render collection&#39;s …\n"],["url_template","Jekyll::Document","Jekyll/Document.html#method-i-url_template","()","<p>The URL template where the document would be accessible.\n<p>Returns the URL template for the document.\n"],["urls_only_differ_by_case","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-urls_only_differ_by_case","(site)",""],["user_email","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-user_email","()",""],["user_name","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-user_name","()",""],["valid?","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-valid-3F","(set)","<p>Checks if a given set of default values is valid\n<p>set - the default value hash, as defined in _config.yml …\n"],["valid_include_file?","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-valid_include_file-3F","(path, dir, safe)",""],["valid_processors","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-valid_processors","()","<p>Public: Provides you with a list of processors, the ones we support\ninternally and the ones that you …\n"],["valid_sets","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-valid_sets","()","<p>Returns a list of valid sets\n<p>This is not cached to allow plugins to modify the configuration and have …\n"],["validate_and_ensure_charset","Jekyll::Commands::Serve::Servlet","Jekyll/Commands/Serve/Servlet.html#method-i-validate_and_ensure_charset","(_req, res)",""],["validate_data!","Jekyll::Convertible","Jekyll/Convertible.html#method-i-validate_data-21","(filename)",""],["validate_file_name","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-validate_file_name","(file)",""],["validate_params","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-validate_params","()",""],["validate_permalink!","Jekyll::Convertible","Jekyll/Convertible.html#method-i-validate_permalink-21","(filename)",""],["value_from_plural_key","Jekyll::Utils","Jekyll/Utils.html#method-i-value_from_plural_key","(hash, key)",""],["value_from_singular_key","Jekyll::Utils","Jekyll/Utils.html#method-i-value_from_singular_key","(hash, key)",""],["verbose","Jekyll::Configuration","Jekyll/Configuration.html#method-i-verbose","(override = {})",""],["verbose?","Jekyll::Configuration","Jekyll/Configuration.html#method-i-verbose-3F","(override = {})",""],["version","Jekyll::Drops::JekyllDrop","Jekyll/Drops/JekyllDrop.html#method-i-version","()",""],["warn","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-warn","(topic, message = nil)","<p>Public: Print a message\n<p>topic - the topic of the message, e.g. “Configuration file”, “Deprecation”,\n…\n"],["warn","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-warn","(progname = nil, &block)","<p>Log a <code>WARN</code> message\n"],["warnings","Jekyll::LiquidRenderer::File","Jekyll/LiquidRenderer/File.html#method-i-warnings","()",""],["watch","Jekyll::Commands::Build","Jekyll/Commands/Build.html#method-c-watch","(site, options)","<p>Private: Watch for file changes and rebuild the site.\n<p>site - A Jekyll::Site instance options - A Hash …\n"],["webrick_opts","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-webrick_opts","(opts)",""],["where","Jekyll::Filters","Jekyll/Filters.html#method-i-where","(input, property, value)","<p>Filter an array of objects\n<p>input - the object array property - property within each object to filter\nby …\n"],["where_exp","Jekyll::Filters","Jekyll/Filters.html#method-i-where_exp","(input, variable, expression)","<p>Filters an array of objects against an expression\n<p>input - the object array variable - the variable to …\n"],["whitelist","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-whitelist","()","<p>Build an array of allowed plugin gem names.\n<p>Returns an array of strings, each string being the name of …\n"],["within","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-within","(directory)",""],["write","Jekyll::Convertible","Jekyll/Convertible.html#method-i-write","(dest)","<p>Write the generated page file to the destination directory.\n<p>dest - The String path to the destination …\n"],["write","Jekyll::Document","Jekyll/Document.html#method-i-write","(dest)","<p>Write the generated Document file to the destination directory.\n<p>dest - The String path to the destination …\n"],["write","Jekyll::Site","Jekyll/Site.html#method-i-write","()","<p>Write static files, pages, and posts.\n<p>Returns nothing.\n"],["write","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-write","(dest)","<p>Write the static file to the destination directory (if modified).\n<p>dest - The String path to the destination …\n"],["write?","Jekyll::Collection","Jekyll/Collection.html#method-i-write-3F","()","<p>Whether the collection&#39;s documents ought to be written as individual\n\n<pre>files in the output.</pre>\n<p>Returns true …\n"],["write?","Jekyll::Document","Jekyll/Document.html#method-i-write-3F","()","<p>Determine whether this document should be written. Based on the Collection\nto which it belongs.\n<p>True if …\n"],["write?","Jekyll::Page","Jekyll/Page.html#method-i-write-3F","()",""],["write?","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-write-3F","()","<p>Whether to write the file to the filesystem\n<p>Returns true unless the defaults for the destination path …\n"],["write_file","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-write_file","(filename, contents)",""],["write_metadata","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-write_metadata","()","<p>Write the metadata to disk\n<p>Returns nothing.\n"],["xml_escape","Jekyll::Filters","Jekyll/Filters.html#method-i-xml_escape","(input)","<p>XML escape a string for use. Replaces any special characters with\nappropriate HTML entity replacements. …\n"],["y_day","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-y_day","()",""],["yaml_file?","Jekyll::Document","Jekyll/Document.html#method-i-yaml_file-3F","()","<p>Determine whether the document is a YAML file.\n<p>Returns true if the extname is either .yml or .yaml, false …\n"],["year","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-year","()",""],["LICENSE","","LICENSE.html","","<p>The MIT License (MIT)\n<p>Copyright © 2008-2016 Tom Preston-Werner\n<p>Permission is hereby granted, free of …\n"],["README.markdown","","README_markdown.html","","<p>Jekyll\n<p><img src=\"https://img.shields.io/gem/v/jekyll.svg\">\n<img\nsrc=\"https://img.shields.io/travis/jekyll/jekyll/master.svg?label=Linux%20build\">\n...\n"],["mime.types","","lib/jekyll/mime_types.html","","<p># Woah there. Do not edit this file directly. # This file is generated\nautomatically by script/vendor-mimes. …\n"],["about","","lib/site_template/about_md.html","","<p>—\nlayout: page\ntitle: About\npermalink: /about/\n---\n<p>This is the base Jekyll theme. You can find out more …\n"],["main.scss","","lib/site_template/css/main_scss.html","","<p># Only the main Sass file needs front matter (the dashes are enough)\n<p>@charset “utf-8”;\n<p>// Our …\n"],["feed.xml","","lib/site_template/feed_xml.html","","<p>layout: null\n<p>&lt;?xml version=“1.0” encoding=“UTF-8”?&gt; &lt;rss version=“2.0” …\n"],["index.html","","lib/site_template/index_html.html","","<p>layout: default\n<p>&lt;div class=“home”&gt;\n\n<pre>&lt;h1 class=&quot;page-heading&quot;&gt;Posts&lt;/h1&gt;\n\n&lt;ul class=&quot;post-list&quot;&gt; ...</pre>\n"],["Gemfile","","lib/theme_template/Gemfile.html","","<p>source “rubygems.org” gemspec\n"],["default.html","","lib/theme_template/_layouts/default_html.html","","<p>{{ content }}\n"],["page.html","","lib/theme_template/_layouts/page_html.html","","<p>layout: default\n<p>{{ content }}\n"],["post.html","","lib/theme_template/_layouts/post_html.html","","<p>layout: default\n<p>{{ content }}\n"],["_post","","lib/theme_template/example/_post_md.html","","<p>—\nlayout: post\n---\n<p>Eos eu docendi tractatos sapientem, brute option menandri in vix, quando\nvivendo …\n"],["index.html","","lib/theme_template/example/index_html.html","","<p>layout: page\n<p>Lorem ipsum dolor sit amet, quo id prima corrumpit pertinacia, id ius dolor\ndolores, an veri …\n"],["style.scss","","lib/theme_template/example/style_scss.html","","<p>// Here, you can test out the Sass/SCSS that you include in your theme. //\nSimply `@import` the necessary …\n"]]}}