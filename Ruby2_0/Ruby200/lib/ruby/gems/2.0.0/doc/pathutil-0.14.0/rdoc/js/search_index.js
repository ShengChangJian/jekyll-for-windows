var search_data = {"index":{"searchIndex":["pathutil","helpers","<()","<=()","===()",">()",">=()","absolute()","absolute?()","aggressive_cleanpath()","allowed()","ascend()","binread()","binwrite()","chdir()","children()","cleanpath()","cleanpath_aggressive()","cleanpath_conservative()","conservative_cleanpath()","cwd()","descend()","each_filename()","each_line()","encoding()","encoding()","enforce_root()","entries()","expanded_paths()","find()","fnmatch()","fnmatch?()","gcwd()","glob()","in_path?()","inspect()","load_yaml()","make_tmpname()","new()","normalize()","normalize()","parent()","prepend()","pwd()","read()","read_json()","read_yaml()","readlines()","relative()","relative_path_from()","root?()","safe_copy()","safe_copy_directory()","safe_copy_file()","search_backwards()","setup_safe_yaml()","split()","split_path()","strip_windows_drive()","sub_ext()","tmpdir()","tmpfile()","tmpname_prefix()","tmpname_suffix()","to_regexp()","write()"],"longSearchIndex":["pathutil","pathutil::helpers","pathutil#<()","pathutil#<=()","pathutil#===()","pathutil#>()","pathutil#>=()","pathutil#absolute()","pathutil#absolute?()","pathutil#aggressive_cleanpath()","pathutil::helpers#allowed()","pathutil#ascend()","pathutil#binread()","pathutil#binwrite()","pathutil#chdir()","pathutil#children()","pathutil#cleanpath()","pathutil#cleanpath_aggressive()","pathutil#cleanpath_conservative()","pathutil#conservative_cleanpath()","pathutil::cwd()","pathutil#descend()","pathutil#each_filename()","pathutil#each_line()","pathutil::encoding()","pathutil#encoding()","pathutil#enforce_root()","pathutil#entries()","pathutil#expanded_paths()","pathutil#find()","pathutil#fnmatch()","pathutil#fnmatch?()","pathutil::gcwd()","pathutil#glob()","pathutil#in_path?()","pathutil#inspect()","pathutil::helpers#load_yaml()","pathutil::helpers#make_tmpname()","pathutil::new()","pathutil::normalize()","pathutil#normalize()","pathutil#parent()","pathutil#prepend()","pathutil::pwd()","pathutil#read()","pathutil#read_json()","pathutil#read_yaml()","pathutil#readlines()","pathutil#relative()","pathutil#relative_path_from()","pathutil#root?()","pathutil#safe_copy()","pathutil#safe_copy_directory()","pathutil#safe_copy_file()","pathutil#search_backwards()","pathutil::helpers#setup_safe_yaml()","pathutil#split()","pathutil#split_path()","pathutil#strip_windows_drive()","pathutil#sub_ext()","pathutil::tmpdir()","pathutil::tmpfile()","pathutil::helpers#tmpname_prefix()","pathutil::helpers#tmpname_suffix()","pathutil#to_regexp()","pathutil#write()"],"info":[["Pathutil","","Pathutil.html","","<p>Frozen-string-literal: true Copyright: 2015-2016 Jordon Bedwell - MIT\nLicense Encoding: utf-8\n"],["Pathutil::Helpers","","Pathutil/Helpers.html","",""],["<","Pathutil","Pathutil.html#method-i-3C","(other)","<p>– @example Pathutil.new(“/”) &lt; Pathutil.new(“/hello”) # =&gt; true\nStrictly check …\n"],["<=","Pathutil","Pathutil.html#method-i-3C-3D","(other)","<p>– Check to see if a path is behind the other path but within it. @example\nPathutil.new(“/hello”) …\n"],["===","Pathutil","Pathutil.html#method-i-3D-3D-3D","(other)","<p>– @see `String#==` for more details. A stricter version of `==` that also\nmakes sure the object matches. …\n"],[">","Pathutil","Pathutil.html#method-i-3E","(other)","<p>– @example Pathutil.new(“/hello/world”) &gt; Pathutil.new(“/hello”) # =&gt;\ntrue …\n"],[">=","Pathutil","Pathutil.html#method-i-3E-3D","(other)","<p>– @example Pathutil.new(“/hello”) &gt;= Pathutil.new(“/”) # =&gt; true\n@example …\n"],["absolute","Pathutil","Pathutil.html#method-i-absolute","()","<p>– Make a path absolute –\n"],["absolute?","Pathutil","Pathutil.html#method-i-absolute-3F","()","<p>– @note “./” is considered relative. Check to see if the path is absolute,\nas in: starts with …\n"],["aggressive_cleanpath","Pathutil","Pathutil.html#method-i-aggressive_cleanpath","()","<p>– rubocop:disable Metrics/AbcSize rubocop:disable\nMetrics/CyclomaticComplexity rubocop:disable Metrics/PerceivedComplexity …\n"],["allowed","Pathutil::Helpers","Pathutil/Helpers.html#method-i-allowed","()","<p>–\n"],["ascend","Pathutil","Pathutil.html#method-i-ascend","()","<p>– @yield Pathutil Break apart the path and yield each with the previous\nparts. @example Pathutil.new …\n"],["binread","Pathutil","Pathutil.html#method-i-binread","(*args, **kwd)","<p>– @note You can set the default encodings via the class. Binread took two\nsteroid shots: it can normalize …\n"],["binwrite","Pathutil","Pathutil.html#method-i-binwrite","(data, *args, **kwd)","<p>– @note You can set the default encodings via the class. Binwrite took two\nsteroid shots: it can normalize …\n"],["chdir","Pathutil","Pathutil.html#method-i-chdir","()","<p>– @yield &amp;block Move to the current directory temporarily (or for good)\nand do work son. @note you …\n"],["children","Pathutil","Pathutil.html#method-i-children","()","<p>– @return Array&lt;Pathutil&gt; Grab all of the children from the current\ndirectory, including hidden. …\n"],["cleanpath","Pathutil","Pathutil.html#method-i-cleanpath","(symlink = false)","<p>– @see Pathname#cleanpath. @note This is a wholesale rip and cleanup of\nPathname#cleanpath @return  …\n"],["cleanpath_aggressive","Pathutil","Pathutil.html#method-i-cleanpath_aggressive","()",""],["cleanpath_conservative","Pathutil","Pathutil.html#method-i-cleanpath_conservative","()",""],["conservative_cleanpath","Pathutil","Pathutil.html#method-i-conservative_cleanpath","()","<p>–\n"],["cwd","Pathutil","Pathutil.html#method-c-cwd","()",""],["descend","Pathutil","Pathutil.html#method-i-descend","()","<p>– @yield Pathutil Break apart the path in reverse order and descend into\nthe path. @example Pathutil.new …\n"],["each_filename","Pathutil","Pathutil.html#method-i-each_filename","()","<p>– @yield Pathutil Splits the path returning each part (filename) back to\nyou. @return Enum –\n"],["each_line","Pathutil","Pathutil.html#method-i-each_line","()","<p>– @yield Pathutil @example Pathutil.new(“/hello/world”).each_line { |line|\n$stdout.puts line …\n"],["encoding","Pathutil","Pathutil.html#method-c-encoding","()","<p>– @note you are encouraged to override this if you need to. Aliases the\ndefault system encoding to us …\n"],["encoding","Pathutil","Pathutil.html#method-i-encoding","()","<p>– @see `self.class.encoding` as this is an alias. –\n"],["enforce_root","Pathutil","Pathutil.html#method-i-enforce_root","(root)","<p>– Expands the path and left joins the root to the path. @return Pathutil –\n"],["entries","Pathutil","Pathutil.html#method-i-entries","()",""],["expanded_paths","Pathutil","Pathutil.html#method-i-expanded_paths","(path)","<p>– rubocop:enable Metrics/AbcSize rubocop:enable\nMetrics/CyclomaticComplexity rubocop:enable Metrics/PerceivedComplexity …\n"],["find","Pathutil","Pathutil.html#method-i-find","()","<p>– @yield Pathutil Find all files without care and yield the given block.\n@return Enum –\n"],["fnmatch","Pathutil","Pathutil.html#method-i-fnmatch","(matcher)",""],["fnmatch?","Pathutil","Pathutil.html#method-i-fnmatch-3F","(matcher)","<p>– @example Pathutil.new(“/hello”).fnmatch?(“/hello”) # =&gt; true Unlike\ntraditional …\n"],["gcwd","Pathutil","Pathutil.html#method-c-gcwd","()",""],["glob","Pathutil","Pathutil.html#method-i-glob","(pattern, flags = 0)","<p>– @yield Pathutil Allows you to glob however you wish to glob in the\ncurrent `Pathutil` @see `File::Constants` …\n"],["in_path?","Pathutil","Pathutil.html#method-i-in_path-3F","(path)","<p>– Allows you to check if the current path is in the path you want. @return\ntrue|false –\n"],["inspect","Pathutil","Pathutil.html#method-i-inspect","()","<p>–\n"],["load_yaml","Pathutil::Helpers","Pathutil/Helpers.html#method-i-load_yaml","(data, safe: true, whitelist_classes: allowed[:yaml][:classes], \\ whitelist_symbols: allowed[:yaml][:symbols], aliases: :yes)","<p>– Wraps around YAML and SafeYAML to provide alternatives to Rubies. @note\nWe default aliases to yes …\n"],["make_tmpname","Pathutil::Helpers","Pathutil/Helpers.html#method-i-make_tmpname","(prefix = \"\", suffix = nil, root = nil)","<p>– Make a temporary name suitable for temporary files and directories.\n@return String –\n"],["new","Pathutil","Pathutil.html#method-c-new","(path)","<p>– @note A lot of this class can be compatible with Pathname. Initialize a\nnew instance. @return Pathutil …\n"],["normalize","Pathutil","Pathutil.html#method-c-normalize","()","<p>– Normalize CRLF -&gt; LF   on Windows reads, to ease  your troubles.\nNormalize LF   -&gt; CLRF on  …\n"],["normalize","Pathutil","Pathutil.html#method-i-normalize","()","<p>– @see `self.class.normalize` as this is an alias. –\n"],["parent","Pathutil","Pathutil.html#method-i-parent","()","<p>– Get the parent of the current path. @note This will simply return self if\n“/”. @return  …\n"],["prepend","Pathutil","Pathutil.html#method-i-prepend","(root)",""],["pwd","Pathutil","Pathutil.html#method-c-pwd","()","<p>– @note We do nothing special here. Get the current directory that Ruby\nknows about. @return Pathutil …\n"],["read","Pathutil","Pathutil.html#method-i-read","(*args, **kwd)","<p>– @note You can set the default encodings via the class. Read took two\nsteroid shots: it can normalize …\n"],["read_json","Pathutil","Pathutil.html#method-i-read_json","(throw_missing: false)","<p>– Read the file as a JSON file turning it into an object. @see\nself.class.read_json as this is a direct …\n"],["read_yaml","Pathutil","Pathutil.html#method-i-read_yaml","(throw_missing: false, **kwd)","<p>– Read the file as a YAML file turning it into an object. @see\nself.class.load_yaml as this a direct …\n"],["readlines","Pathutil","Pathutil.html#method-i-readlines","(*args, **kwd)","<p>– @note You can set the default encodings via the class. Readlines took two\nsteroid shots: it can normalize …\n"],["relative","Pathutil","Pathutil.html#method-i-relative","()","<p>– Make a path relative. –\n"],["relative_path_from","Pathutil","Pathutil.html#method-i-relative_path_from","(from)","<p>– A less complex version of `relative_path_from` that simply uses a\n`Regexp` and returns the full path …\n"],["root?","Pathutil","Pathutil.html#method-i-root-3F","()","<p>– Allows you to quickly determine if the file is the root folder. @return\ntrue|false –\n"],["safe_copy","Pathutil","Pathutil.html#method-i-safe_copy","(to, root: nil, ignore: [])","<p>– Copy a directory, allowing symlinks if the link falls inside of the root.\nThis is indented for people …\n"],["safe_copy_directory","Pathutil","Pathutil.html#method-i-safe_copy_directory","(to, root: nil, ignore: [])","<p>– Safely copy a directory and it&#39;s sub-files. –\n"],["safe_copy_file","Pathutil","Pathutil.html#method-i-safe_copy_file","(to, root: nil)","<p>– Safely copy a file. –\n"],["search_backwards","Pathutil","Pathutil.html#method-i-search_backwards","(file, backwards: Float::INFINITY)","<p>– @yield Pathutil @note It will return all results that it finds across all\nascending paths. @example …\n"],["setup_safe_yaml","Pathutil::Helpers","Pathutil/Helpers.html#method-i-setup_safe_yaml","(whitelist_classes, aliases)","<p>– Wrap around, cleanup, deprecate and use SafeYAML. rubocop:enable\nStyle/ParallelAssignment –\n"],["split","Pathutil","Pathutil.html#method-i-split","()","<p>– @yield Pathutil Split the file into its dirname and basename, so you can\ndo stuff. @return nil – …\n"],["split_path","Pathutil","Pathutil.html#method-i-split_path","()","<p>– @note The blank part is intentionally left there so that you can rejoin.\nSplits the path into all …\n"],["strip_windows_drive","Pathutil","Pathutil.html#method-i-strip_windows_drive","(path = @path)","<p>– Strips the windows drive from the path. –\n"],["sub_ext","Pathutil","Pathutil.html#method-i-sub_ext","(ext)","<p>– @note Your extension should start with “.” Replace a files extension with\nyour given extension. …\n"],["tmpdir","Pathutil","Pathutil.html#method-c-tmpdir","(*args)","<p>– Make a temporary directory. @note if you adruptly exit it will not remove\nthe dir. @note this directory …\n"],["tmpfile","Pathutil","Pathutil.html#method-c-tmpfile","(*args)","<p>– Make a temporary file. @note if you adruptly exit it will not remove the\ndir. @note this file is removed …\n"],["tmpname_prefix","Pathutil::Helpers","Pathutil/Helpers.html#method-i-tmpname_prefix","(prefix)","<p>– Cleanup the temp name prefix, joining if necessary. rubocop:disable\nStyle/ParallelAssignment –\n"],["tmpname_suffix","Pathutil::Helpers","Pathutil/Helpers.html#method-i-tmpname_suffix","(suffix)","<p>–\n"],["to_regexp","Pathutil","Pathutil.html#method-i-to_regexp","(guard: true)","<p>–\n"],["write","Pathutil","Pathutil.html#method-i-write","(data, *args, **kwd)","<p>– @note You can set the default encodings via the class. Write took two\nsteroid shots: it can normalize …\n"]]}}